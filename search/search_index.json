{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi IO Prometheus The siddhi-io-prometheus extension is an extension to Siddhi that consumes and expose Prometheus metrics from/to Prometheus server. For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 2.x and above with group id io.siddhi.extension.* from here . Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here . Latest API Docs Latest API Docs is 2.0.1 . Features prometheus (Sink) This sink publishes events processed by Siddhi into Prometheus metrics and exposes them to the Prometheus server at the specified URL. The created metrics can be published to Prometheus via 'server' or 'pushGateway', depending on your preference. The metric types that are supported by the Prometheus sink are 'counter', 'gauge', 'histogram', and 'summary'. The values and labels of the Prometheus metrics can be updated through the events. prometheus (Source) This source consumes Prometheus metrics that are exported from a specified URL as Siddhi events by sending HTTP requests to the URL. Based on the source configuration, it analyzes metrics from the text response and sends them as Siddhi events through key-value mapping.The user can retrieve metrics of the 'including', 'counter', 'gauge', 'histogram', and 'summary' types. The source retrieves the metrics from a text response of the target. Therefore, it is you need to use 'string' as the attribute type for the attributes that correspond with the Prometheus metric labels. Further, the Prometheus metric value is passed through the event as 'value'. This requires you to include an attribute named 'value' in the stream definition. The supported types for the 'value' attribute are 'INT', 'LONG', 'FLOAT', and 'DOUBLE'. Dependencies Prometheus server instance should be started. Prometheus Pushgateway should be started. (optional) Download and copy the prometheus client jars to the Siddhi Class path from https://mvnrepository.com/artifact/io.prometheus simpleclient_common-*.jar simpleclient-*.jar simpleclient_httpserver-*.jar simpleclient_pushgateway-*.jar Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Integration Test with Local Docker (Optional) The prometheus sink can be tested with the Docker base integration test framework. The test framework initialize a Docker container with required configuration before execute the test suit. To start integration tests, Install and run Docker To run the integration tests, navigate to the siddhi-io-prometheus/ directory and issue the following command. mvn verify -P local-prometheus Prometheus target configurations can be modified at the directory for integration tests : siddhi-io-prometheus/component/src/test/resources/prometheus/prometheus.yml Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-io-prometheus","text":"The siddhi-io-prometheus extension is an extension to Siddhi that consumes and expose Prometheus metrics from/to Prometheus server. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi IO Prometheus"},{"location":"#download","text":"Versions 2.x and above with group id io.siddhi.extension.* from here . Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 2.0.1 .","title":"Latest API Docs"},{"location":"#features","text":"prometheus (Sink) This sink publishes events processed by Siddhi into Prometheus metrics and exposes them to the Prometheus server at the specified URL. The created metrics can be published to Prometheus via 'server' or 'pushGateway', depending on your preference. The metric types that are supported by the Prometheus sink are 'counter', 'gauge', 'histogram', and 'summary'. The values and labels of the Prometheus metrics can be updated through the events. prometheus (Source) This source consumes Prometheus metrics that are exported from a specified URL as Siddhi events by sending HTTP requests to the URL. Based on the source configuration, it analyzes metrics from the text response and sends them as Siddhi events through key-value mapping.The user can retrieve metrics of the 'including', 'counter', 'gauge', 'histogram', and 'summary' types. The source retrieves the metrics from a text response of the target. Therefore, it is you need to use 'string' as the attribute type for the attributes that correspond with the Prometheus metric labels. Further, the Prometheus metric value is passed through the event as 'value'. This requires you to include an attribute named 'value' in the stream definition. The supported types for the 'value' attribute are 'INT', 'LONG', 'FLOAT', and 'DOUBLE'.","title":"Features"},{"location":"#dependencies","text":"Prometheus server instance should be started. Prometheus Pushgateway should be started. (optional) Download and copy the prometheus client jars to the Siddhi Class path from https://mvnrepository.com/artifact/io.prometheus simpleclient_common-*.jar simpleclient-*.jar simpleclient_httpserver-*.jar simpleclient_pushgateway-*.jar","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#integration-test-with-local-docker-optional","text":"The prometheus sink can be tested with the Docker base integration test framework. The test framework initialize a Docker container with required configuration before execute the test suit. To start integration tests, Install and run Docker To run the integration tests, navigate to the siddhi-io-prometheus/ directory and issue the following command. mvn verify -P local-prometheus Prometheus target configurations can be modified at the directory for integration tests : siddhi-io-prometheus/component/src/test/resources/prometheus/prometheus.yml","title":"Integration Test with Local Docker (Optional)"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/1.0.0/","text":"API Docs - v1.0.0 Sink prometheus (Sink) The sink publishes events processed by WSO2 SP into Prometheus metrics and exposes them to Prometheus server at the provided url. The created metrics can be published to Prometheus through 'server' or 'pushGateway' publishing modes depending on the preference of the user. The server mode exposes the metrics through an http server at the provided url and the pushGateway mode pushes the metrics to pushGateway which must be running at the provided url. The metric types that are supported by Prometheus sink are counter, gauge, histogram and summary. The values and labels of the Prometheus metrics can be updated through the events. Syntax @sink(type=\"prometheus\", job=\"<STRING>\", publish.mode=\"<STRING>\", push.url=\"<STRING>\", server.url=\"<STRING>\", metric.type=\"<STRING>\", metric.help=\"<STRING>\", metric.name=\"<STRING>\", buckets=\"<STRING>\", quantiles=\"<STRING>\", quantile.error=\"<DOUBLE>\", value.attribute=\"<STRING>\", push.operation=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic job This parameter specifies the job name of the metric. The name must be the same job name as defined in the prometheus configuration file. siddhiJob STRING Yes No publish.mode This parameter specifies the mode of exposing metrics to Prometheus server.The possible publishing modes are 'server' and 'pushgateway'. server STRING Yes No push.url This parameter specifies the target url of the Prometheus pushGateway where the pushGateway must be listening. This url should be previously defined in prometheus configuration file as a target. http://localhost:9091 STRING Yes No server.url This parameter specifies the url where the http server is initiated to expose metrics for 'server' publish mode. This url must be previously defined in prometheus configuration file as a target. http://localhost:9080 STRING Yes No metric.type The type of Prometheus metric that has to be created at the sink. The supported metric types are 'counter', 'gauge', 'histogram' and 'summary'. STRING No No metric.help A brief description of the metric and its purpose. STRING Yes No metric.name This parameter specifies the user preferred name for the metric. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]*. STRING Yes No buckets The bucket values preferred by the user for histogram metrics. The bucket values must be in 'string' format with each bucket value separated by a comma. The expected format of the parameter is as follows: \"2,4,6,8\" null STRING Yes No quantiles The user preferred quantile values for summary metrics. The quantile values must be in 'string' format with each quantile value separated by a comma. The expected format of the parameter is as follows: \"0.5,0.75,0.95\" null STRING Yes No quantile.error The error tolerance value for calculating quantiles in summary metrics. This must be a positive value though less than 1. 0.001 DOUBLE Yes No value.attribute The name of the attribute in stream definition which specifies the metric value. The defined value attribute must be included inside the stream attributes. The value of the 'value' attribute that is published through events, increase the metric value for the counter and gauge metric types. For histogram and summary metric types, the values are observed. value STRING Yes No push.operation This parameter defines the mode for pushing metrics to pushGateway The available push operations are 'push' and 'pushadd'. The operations differ according to the existing metrics in pushGateway where 'push' operation replaces the existing metrics and 'pushadd' operation only updates the newly created metrics. pushadd STRING Yes No grouping.key This parameter specifies the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters jobName This is the property that specifies the default job name for the metric. The name must be the same job name as defined in the prometheus configuration file. siddhiJob Any string publishMode The default publish mode for the Prometheus sink for exposing metrics to Prometheus server. The mode can be either 'server' or 'pushgateway'. server server or pushgateway serverURL This property configures the url where the http server will be initiated to expose metrics. This url must be previously defined in prometheus configuration file as a target to be identified by Prometheus. By default, the http server will be initiated at 'http://localhost:9080' http://localhost:9080 Any valid URL pushURL This property configures the target url of Prometheus pushGateway where the pushGateway must be listening. This url should be previously defined in prometheus configuration file as a target to be identified by Prometheus. http://localhost:9091 Any valid URL groupingKey This property configures the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics under same job. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" . null Any key value pairs in the supported format Examples EXAMPLE 1 @sink(type='prometheus',job='fooOrderCount', server.url ='http://localhost:9080', publish.mode='server', metric.type='counter', metric.help= 'Number of foo orders', @map(type='keyvalue')) define stream FooCountStream (Name String, quantity int, value int); In the above example, the Prometheus-sink creates a counter metric with the stream name and defined attributes as labels. The metric is exposed through an http server at the target url. EXAMPLE 2 @sink(type='prometheus',job='inventoryLevel', push.url='http://localhost:9080', publish.mode='pushGateway', metric.type='gauge', metric.help= 'Current level of inventory', @map(type='keyvalue')) define stream InventoryLevelStream (Name String, value int); In the above example, the Prometheus-sink creates a gauge metric with the stream name and defined attributes as labels.The metric is pushed to Prometheus pushGateway at the target url. Source prometheus (Source) The source consumes Prometheus metrics which are exported from the specified url as Siddhi events, by making http requests to the url. According to the source configuration, it analyses metrics from the text response and sends them as Siddhi events through key-value mapping.The user can retrieve metrics of types including, counter, gauge, histogram and summary. Since the source retrieves the metrics from a text response of the target, it is advised to use 'string' as the attribute type for the attributes that correspond to Prometheus metric labels. Further, the Prometheus metric value is passed through the event as 'value'. Therefore, it is advisable to have an attribute with the name 'value' in the stream. The supported types for the attribute, 'value' are INT, LONG, FLOAT and DOUBLE. Syntax @source(type=\"prometheus\", target.url=\"<STRING>\", scrape.interval=\"<INT>\", scrape.timeout=\"<INT>\", scheme=\"<STRING>\", metric.name=\"<STRING>\", metric.type=\"<STRING>\", username=\"<STRING>\", password=\"<STRING>\", client.truststore.file=\"<STRING>\", client.truststore.password=\"<STRING>\", headers=\"<STRING>\", job=\"<STRING>\", instance=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic target.url This property specifies the target url where the Prometheus metrics are exported in text format. STRING No No scrape.interval This property specifies the time interval in seconds within which the source should make an HTTP request to the provided target url. 60 INT Yes No scrape.timeout This property is the time duration in seconds for a scrape request to get timed-out if the server at the url does not respond. 10 INT Yes No scheme This property specifies the scheme of the target URL. The supported schemes are 'HTTP' and 'HTTPS'. HTTP STRING Yes No metric.name This property specifies the name of the metrics that are to be fetched. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]* . Stream name STRING Yes No metric.type This property specifies the type of the Prometheus metric that is required to be fetched. The supported metric types are 'counter', 'gauge',\" 'histogram' and 'summary'. STRING No No username This property specifies the username that has to be added in the authorization header of the HTTP request, if basic authentication is enabled at the target. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the console. STRING Yes No password This property specifies the password that has to be added in the authorization header of the request, if the basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If one of the parameter is not given by user, then an error is logged in the console. STRING Yes No client.truststore.file The file path to the location of the truststore to which the client needs to send https requests through 'https' protocol. STRING Yes No client.truststore.password The password for client-truststore to send https requests. A custom password can be specified if required. STRING Yes No headers Headers that should be included as HTTP request headers in the request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" STRING Yes No job This property defines the job name of the exported Prometheus metrics that has to be fetched. STRING Yes No instance This property defines the instance of the exported Prometheus metrics that has to be fetched. STRING Yes No grouping.key This parameter specifies the grouping key of the required metrics in key-value pairs. Grouping key is used if the metrics are exported by Prometheus pushGateway in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters scrapeInterval The default time interval in seconds for the Prometheus source to make HTTP requests to the target URL. 60 Any integer value scrapeTimeout This default time duration (in seconds) for an HTTP request to time-out if the server at the URL does not respond. 10 Any integer value scheme The scheme of the target for Prometheus source to make HTTP requests. The supported schemes are HTTP and HTTPS. HTTP HTTP or HTTPS username The username that has to be added in the authorization header of the HTTP request, if basic authentication is enabled at the target. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the console. Any string password The password that has to be added in the authorization header of the HTTP request, if basic authentication is enabled at the target. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the console. Any string trustStoreFile The default file path to the location of truststore that the client needs to send for HTTPS requests through 'HTTPS' protocol. ${carbon.home}/resources/security/client-truststore.jks Any valid path for the truststore file trustStorePassword The default password for the client-truststore to send HTTPS requests. wso2carbon Any string headers The headers that should be included as HTTP request headers in the scrape request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" Any valid http headers job The default job name of the exported Prometheus metrics that has to be fetched. Any valid job name instance The default instance of the exported Prometheus metrics that has to be fetched. Any valid instance name groupingKey The default grouping key of the required Prometheus metrics in key-value pairs. Grouping key is used if the metrics are exported by Prometheus pushGateway in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" Any valid grouping key pairs Examples EXAMPLE 1 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'counter', metric.name= 'sweet_production_counter', @map(type= 'keyvalue')) define stream FooStream1(metric_name string, metric_type string, help string, subtype string, name string, quantity string, value double); In this example, the prometheus source makes an http request to the 'target.url' and analyse the response. From the analysed response, the source retrieves the Prometheus counter metrics with the name, 'sweet_production_counter' and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps will have keys and values as follows: metric_name -> sweet_production_counter metric_type -> counter help -> <help_string_of_metric> subtype -> null name -> <value_of_label_name> quantity -> <value_of_label_quantity> value -> <value_of_metric> EXAMPLE 2 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'summary', metric.name= 'sweet_production_summary', @map(type= 'keyvalue')) define stream FooStream2(metric_name string, metric_type string, help string, subtype string, name string, quantity string, quantile string, value double); In this example, the prometheus source makes an http request to the 'target.url' and analyses the response. From the analysed response, the source retrieves the Prometheus summary metrics with the name, 'sweet_production_summary' and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_summary metric_type -> summary help -> <help_string_of_metric> subtype -> <'sum'/'count'/'null'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> quantile -> <value of the quantile> value -> <value_of_metric> EXAMPLE 3 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'histogram', metric.name= 'sweet_production_histogram', @map(type= 'keyvalue')) define stream FooStream3(metric_name string, metric_type string, help string, subtype string, name string, quantity string, le string, value double); In this example, the prometheus source will make an http request to the 'target.url' and analyse the response. From the analysed response, the source retrieves the Prometheus histogram metrics with name 'sweet_production_histogram' and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps will have keys and values as follows, metric_name -> sweet_production_histogram metric_type -> histogram help -> <help_string_of_metric> subtype -> <'sum'/'count'/'bucket'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> le -> <value of the bucket> value -> <value_of_metric>","title":"1.0.0"},{"location":"api/1.0.0/#api-docs-v100","text":"","title":"API Docs - v1.0.0"},{"location":"api/1.0.0/#sink","text":"","title":"Sink"},{"location":"api/1.0.0/#prometheus-sink","text":"The sink publishes events processed by WSO2 SP into Prometheus metrics and exposes them to Prometheus server at the provided url. The created metrics can be published to Prometheus through 'server' or 'pushGateway' publishing modes depending on the preference of the user. The server mode exposes the metrics through an http server at the provided url and the pushGateway mode pushes the metrics to pushGateway which must be running at the provided url. The metric types that are supported by Prometheus sink are counter, gauge, histogram and summary. The values and labels of the Prometheus metrics can be updated through the events. Syntax @sink(type=\"prometheus\", job=\"<STRING>\", publish.mode=\"<STRING>\", push.url=\"<STRING>\", server.url=\"<STRING>\", metric.type=\"<STRING>\", metric.help=\"<STRING>\", metric.name=\"<STRING>\", buckets=\"<STRING>\", quantiles=\"<STRING>\", quantile.error=\"<DOUBLE>\", value.attribute=\"<STRING>\", push.operation=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic job This parameter specifies the job name of the metric. The name must be the same job name as defined in the prometheus configuration file. siddhiJob STRING Yes No publish.mode This parameter specifies the mode of exposing metrics to Prometheus server.The possible publishing modes are 'server' and 'pushgateway'. server STRING Yes No push.url This parameter specifies the target url of the Prometheus pushGateway where the pushGateway must be listening. This url should be previously defined in prometheus configuration file as a target. http://localhost:9091 STRING Yes No server.url This parameter specifies the url where the http server is initiated to expose metrics for 'server' publish mode. This url must be previously defined in prometheus configuration file as a target. http://localhost:9080 STRING Yes No metric.type The type of Prometheus metric that has to be created at the sink. The supported metric types are 'counter', 'gauge', 'histogram' and 'summary'. STRING No No metric.help A brief description of the metric and its purpose. STRING Yes No metric.name This parameter specifies the user preferred name for the metric. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]*. STRING Yes No buckets The bucket values preferred by the user for histogram metrics. The bucket values must be in 'string' format with each bucket value separated by a comma. The expected format of the parameter is as follows: \"2,4,6,8\" null STRING Yes No quantiles The user preferred quantile values for summary metrics. The quantile values must be in 'string' format with each quantile value separated by a comma. The expected format of the parameter is as follows: \"0.5,0.75,0.95\" null STRING Yes No quantile.error The error tolerance value for calculating quantiles in summary metrics. This must be a positive value though less than 1. 0.001 DOUBLE Yes No value.attribute The name of the attribute in stream definition which specifies the metric value. The defined value attribute must be included inside the stream attributes. The value of the 'value' attribute that is published through events, increase the metric value for the counter and gauge metric types. For histogram and summary metric types, the values are observed. value STRING Yes No push.operation This parameter defines the mode for pushing metrics to pushGateway The available push operations are 'push' and 'pushadd'. The operations differ according to the existing metrics in pushGateway where 'push' operation replaces the existing metrics and 'pushadd' operation only updates the newly created metrics. pushadd STRING Yes No grouping.key This parameter specifies the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters jobName This is the property that specifies the default job name for the metric. The name must be the same job name as defined in the prometheus configuration file. siddhiJob Any string publishMode The default publish mode for the Prometheus sink for exposing metrics to Prometheus server. The mode can be either 'server' or 'pushgateway'. server server or pushgateway serverURL This property configures the url where the http server will be initiated to expose metrics. This url must be previously defined in prometheus configuration file as a target to be identified by Prometheus. By default, the http server will be initiated at 'http://localhost:9080' http://localhost:9080 Any valid URL pushURL This property configures the target url of Prometheus pushGateway where the pushGateway must be listening. This url should be previously defined in prometheus configuration file as a target to be identified by Prometheus. http://localhost:9091 Any valid URL groupingKey This property configures the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics under same job. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" . null Any key value pairs in the supported format Examples EXAMPLE 1 @sink(type='prometheus',job='fooOrderCount', server.url ='http://localhost:9080', publish.mode='server', metric.type='counter', metric.help= 'Number of foo orders', @map(type='keyvalue')) define stream FooCountStream (Name String, quantity int, value int); In the above example, the Prometheus-sink creates a counter metric with the stream name and defined attributes as labels. The metric is exposed through an http server at the target url. EXAMPLE 2 @sink(type='prometheus',job='inventoryLevel', push.url='http://localhost:9080', publish.mode='pushGateway', metric.type='gauge', metric.help= 'Current level of inventory', @map(type='keyvalue')) define stream InventoryLevelStream (Name String, value int); In the above example, the Prometheus-sink creates a gauge metric with the stream name and defined attributes as labels.The metric is pushed to Prometheus pushGateway at the target url.","title":"prometheus (Sink)"},{"location":"api/1.0.0/#source","text":"","title":"Source"},{"location":"api/1.0.0/#prometheus-source","text":"The source consumes Prometheus metrics which are exported from the specified url as Siddhi events, by making http requests to the url. According to the source configuration, it analyses metrics from the text response and sends them as Siddhi events through key-value mapping.The user can retrieve metrics of types including, counter, gauge, histogram and summary. Since the source retrieves the metrics from a text response of the target, it is advised to use 'string' as the attribute type for the attributes that correspond to Prometheus metric labels. Further, the Prometheus metric value is passed through the event as 'value'. Therefore, it is advisable to have an attribute with the name 'value' in the stream. The supported types for the attribute, 'value' are INT, LONG, FLOAT and DOUBLE. Syntax @source(type=\"prometheus\", target.url=\"<STRING>\", scrape.interval=\"<INT>\", scrape.timeout=\"<INT>\", scheme=\"<STRING>\", metric.name=\"<STRING>\", metric.type=\"<STRING>\", username=\"<STRING>\", password=\"<STRING>\", client.truststore.file=\"<STRING>\", client.truststore.password=\"<STRING>\", headers=\"<STRING>\", job=\"<STRING>\", instance=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic target.url This property specifies the target url where the Prometheus metrics are exported in text format. STRING No No scrape.interval This property specifies the time interval in seconds within which the source should make an HTTP request to the provided target url. 60 INT Yes No scrape.timeout This property is the time duration in seconds for a scrape request to get timed-out if the server at the url does not respond. 10 INT Yes No scheme This property specifies the scheme of the target URL. The supported schemes are 'HTTP' and 'HTTPS'. HTTP STRING Yes No metric.name This property specifies the name of the metrics that are to be fetched. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]* . Stream name STRING Yes No metric.type This property specifies the type of the Prometheus metric that is required to be fetched. The supported metric types are 'counter', 'gauge',\" 'histogram' and 'summary'. STRING No No username This property specifies the username that has to be added in the authorization header of the HTTP request, if basic authentication is enabled at the target. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the console. STRING Yes No password This property specifies the password that has to be added in the authorization header of the request, if the basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If one of the parameter is not given by user, then an error is logged in the console. STRING Yes No client.truststore.file The file path to the location of the truststore to which the client needs to send https requests through 'https' protocol. STRING Yes No client.truststore.password The password for client-truststore to send https requests. A custom password can be specified if required. STRING Yes No headers Headers that should be included as HTTP request headers in the request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" STRING Yes No job This property defines the job name of the exported Prometheus metrics that has to be fetched. STRING Yes No instance This property defines the instance of the exported Prometheus metrics that has to be fetched. STRING Yes No grouping.key This parameter specifies the grouping key of the required metrics in key-value pairs. Grouping key is used if the metrics are exported by Prometheus pushGateway in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters scrapeInterval The default time interval in seconds for the Prometheus source to make HTTP requests to the target URL. 60 Any integer value scrapeTimeout This default time duration (in seconds) for an HTTP request to time-out if the server at the URL does not respond. 10 Any integer value scheme The scheme of the target for Prometheus source to make HTTP requests. The supported schemes are HTTP and HTTPS. HTTP HTTP or HTTPS username The username that has to be added in the authorization header of the HTTP request, if basic authentication is enabled at the target. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the console. Any string password The password that has to be added in the authorization header of the HTTP request, if basic authentication is enabled at the target. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the console. Any string trustStoreFile The default file path to the location of truststore that the client needs to send for HTTPS requests through 'HTTPS' protocol. ${carbon.home}/resources/security/client-truststore.jks Any valid path for the truststore file trustStorePassword The default password for the client-truststore to send HTTPS requests. wso2carbon Any string headers The headers that should be included as HTTP request headers in the scrape request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" Any valid http headers job The default job name of the exported Prometheus metrics that has to be fetched. Any valid job name instance The default instance of the exported Prometheus metrics that has to be fetched. Any valid instance name groupingKey The default grouping key of the required Prometheus metrics in key-value pairs. Grouping key is used if the metrics are exported by Prometheus pushGateway in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" Any valid grouping key pairs Examples EXAMPLE 1 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'counter', metric.name= 'sweet_production_counter', @map(type= 'keyvalue')) define stream FooStream1(metric_name string, metric_type string, help string, subtype string, name string, quantity string, value double); In this example, the prometheus source makes an http request to the 'target.url' and analyse the response. From the analysed response, the source retrieves the Prometheus counter metrics with the name, 'sweet_production_counter' and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps will have keys and values as follows: metric_name -> sweet_production_counter metric_type -> counter help -> <help_string_of_metric> subtype -> null name -> <value_of_label_name> quantity -> <value_of_label_quantity> value -> <value_of_metric> EXAMPLE 2 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'summary', metric.name= 'sweet_production_summary', @map(type= 'keyvalue')) define stream FooStream2(metric_name string, metric_type string, help string, subtype string, name string, quantity string, quantile string, value double); In this example, the prometheus source makes an http request to the 'target.url' and analyses the response. From the analysed response, the source retrieves the Prometheus summary metrics with the name, 'sweet_production_summary' and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_summary metric_type -> summary help -> <help_string_of_metric> subtype -> <'sum'/'count'/'null'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> quantile -> <value of the quantile> value -> <value_of_metric> EXAMPLE 3 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'histogram', metric.name= 'sweet_production_histogram', @map(type= 'keyvalue')) define stream FooStream3(metric_name string, metric_type string, help string, subtype string, name string, quantity string, le string, value double); In this example, the prometheus source will make an http request to the 'target.url' and analyse the response. From the analysed response, the source retrieves the Prometheus histogram metrics with name 'sweet_production_histogram' and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps will have keys and values as follows, metric_name -> sweet_production_histogram metric_type -> histogram help -> <help_string_of_metric> subtype -> <'sum'/'count'/'bucket'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> le -> <value of the bucket> value -> <value_of_metric>","title":"prometheus (Source)"},{"location":"api/1.0.1/","text":"API Docs - v1.0.1 Sink prometheus (Sink) The sink publishes events processed by Siddhi into Prometheus metrics and exposes them to Prometheus server at the provided url. The created metrics can be published to Prometheus through 'server' or 'pushGateway' publishing modes depending on the preference of the user. The server mode exposes the metrics through an http server at the provided url and the pushGateway mode pushes the metrics to pushGateway which must be running at the provided url. The metric types that are supported by Prometheus sink are counter, gauge, histogram and summary. The values and labels of the Prometheus metrics can be updated through the events. Syntax @sink(type=\"prometheus\", job=\"<STRING>\", publish.mode=\"<STRING>\", push.url=\"<STRING>\", server.url=\"<STRING>\", metric.type=\"<STRING>\", metric.help=\"<STRING>\", metric.name=\"<STRING>\", buckets=\"<STRING>\", quantiles=\"<STRING>\", quantile.error=\"<DOUBLE>\", value.attribute=\"<STRING>\", push.operation=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic job This parameter specifies the job name of the metric. The name must be the same job name as defined in the prometheus configuration file. siddhiJob STRING Yes No publish.mode This parameter specifies the mode of exposing metrics to Prometheus server.The possible publishing modes are 'server' and 'pushgateway'. server STRING Yes No push.url This parameter specifies the target url of the Prometheus pushGateway where the pushGateway must be listening. This url should be previously defined in prometheus configuration file as a target. http://localhost:9091 STRING Yes No server.url This parameter specifies the url where the http server is initiated to expose metrics for 'server' publish mode. This url must be previously defined in prometheus configuration file as a target. http://localhost:9080 STRING Yes No metric.type The type of Prometheus metric that has to be created at the sink. The supported metric types are 'counter', 'gauge', 'histogram' and 'summary'. STRING No No metric.help A brief description of the metric and its purpose. STRING Yes No metric.name This parameter specifies the user preferred name for the metric. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]*. STRING Yes No buckets The bucket values preferred by the user for histogram metrics. The bucket values must be in 'string' format with each bucket value separated by a comma. The expected format of the parameter is as follows: \"2,4,6,8\" null STRING Yes No quantiles The user preferred quantile values for summary metrics. The quantile values must be in 'string' format with each quantile value separated by a comma. The expected format of the parameter is as follows: \"0.5,0.75,0.95\" null STRING Yes No quantile.error The error tolerance value for calculating quantiles in summary metrics. This must be a positive value though less than 1. 0.001 DOUBLE Yes No value.attribute The name of the attribute in stream definition which specifies the metric value. The defined value attribute must be included inside the stream attributes. The value of the 'value' attribute that is published through events, increase the metric value for the counter and gauge metric types. For histogram and summary metric types, the values are observed. value STRING Yes No push.operation This parameter defines the mode for pushing metrics to pushGateway The available push operations are 'push' and 'pushadd'. The operations differ according to the existing metrics in pushGateway where 'push' operation replaces the existing metrics and 'pushadd' operation only updates the newly created metrics. pushadd STRING Yes No grouping.key This parameter specifies the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters jobName This is the property that specifies the default job name for the metric. The name must be the same job name as defined in the prometheus configuration file. siddhiJob Any string publishMode The default publish mode for the Prometheus sink for exposing metrics to Prometheus server. The mode can be either 'server' or 'pushgateway'. server server or pushgateway serverURL This property configures the url where the http server will be initiated to expose metrics. This url must be previously defined in prometheus configuration file as a target to be identified by Prometheus. By default, the http server will be initiated at 'http://localhost:9080' http://localhost:9080 Any valid URL pushURL This property configures the target url of Prometheus pushGateway where the pushGateway must be listening. This url should be previously defined in prometheus configuration file as a target to be identified by Prometheus. http://localhost:9091 Any valid URL groupingKey This property configures the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics under same job. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" . null Any key value pairs in the supported format Examples EXAMPLE 1 @sink(type='prometheus',job='fooOrderCount', server.url ='http://localhost:9080', publish.mode='server', metric.type='counter', metric.help= 'Number of foo orders', @map(type='keyvalue')) define stream FooCountStream (Name String, quantity int, value int); In the above example, the Prometheus-sink creates a counter metric with the stream name and defined attributes as labels. The metric is exposed through an http server at the target url. EXAMPLE 2 @sink(type='prometheus',job='inventoryLevel', push.url='http://localhost:9080', publish.mode='pushGateway', metric.type='gauge', metric.help= 'Current level of inventory', @map(type='keyvalue')) define stream InventoryLevelStream (Name String, value int); In the above example, the Prometheus-sink creates a gauge metric with the stream name and defined attributes as labels.The metric is pushed to Prometheus pushGateway at the target url. Source prometheus (Source) The source consumes Prometheus metrics which are exported from the specified url as Siddhi events, by making http requests to the url. According to the source configuration, it analyses metrics from the text response and sends them as Siddhi events through key-value mapping.The user can retrieve metrics of types including, counter, gauge, histogram and summary. Since the source retrieves the metrics from a text response of the target, it is advised to use 'string' as the attribute type for the attributes that correspond to Prometheus metric labels. Further, the Prometheus metric value is passed through the event as 'value'. Therefore, it is advisable to have an attribute with the name 'value' in the stream. The supported types for the attribute, 'value' are INT, LONG, FLOAT and DOUBLE. Syntax @source(type=\"prometheus\", target.url=\"<STRING>\", scrape.interval=\"<INT>\", scrape.timeout=\"<INT>\", scheme=\"<STRING>\", metric.name=\"<STRING>\", metric.type=\"<STRING>\", username=\"<STRING>\", password=\"<STRING>\", client.truststore.file=\"<STRING>\", client.truststore.password=\"<STRING>\", headers=\"<STRING>\", job=\"<STRING>\", instance=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic target.url This property specifies the target url where the Prometheus metrics are exported in text format. STRING No No scrape.interval This property specifies the time interval in seconds within which the source should make an HTTP request to the provided target url. 60 INT Yes No scrape.timeout This property is the time duration in seconds for a scrape request to get timed-out if the server at the url does not respond. 10 INT Yes No scheme This property specifies the scheme of the target URL. The supported schemes are 'HTTP' and 'HTTPS'. HTTP STRING Yes No metric.name This property specifies the name of the metrics that are to be fetched. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]* . Stream name STRING Yes No metric.type This property specifies the type of the Prometheus metric that is required to be fetched. The supported metric types are 'counter', 'gauge',\" 'histogram' and 'summary'. STRING No No username This property specifies the username that has to be added in the authorization header of the HTTP request, if basic authentication is enabled at the target. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the console. STRING Yes No password This property specifies the password that has to be added in the authorization header of the request, if the basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If one of the parameter is not given by user, then an error is logged in the console. STRING Yes No client.truststore.file The file path to the location of the truststore to which the client needs to send https requests through 'https' protocol. STRING Yes No client.truststore.password The password for client-truststore to send https requests. A custom password can be specified if required. STRING Yes No headers Headers that should be included as HTTP request headers in the request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" STRING Yes No job This property defines the job name of the exported Prometheus metrics that has to be fetched. STRING Yes No instance This property defines the instance of the exported Prometheus metrics that has to be fetched. STRING Yes No grouping.key This parameter specifies the grouping key of the required metrics in key-value pairs. Grouping key is used if the metrics are exported by Prometheus pushGateway in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters scrapeInterval The default time interval in seconds for the Prometheus source to make HTTP requests to the target URL. 60 Any integer value scrapeTimeout This default time duration (in seconds) for an HTTP request to time-out if the server at the URL does not respond. 10 Any integer value scheme The scheme of the target for Prometheus source to make HTTP requests. The supported schemes are HTTP and HTTPS. HTTP HTTP or HTTPS username The username that has to be added in the authorization header of the HTTP request, if basic authentication is enabled at the target. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the console. Any string password The password that has to be added in the authorization header of the HTTP request, if basic authentication is enabled at the target. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the console. Any string trustStoreFile The default file path to the location of truststore that the client needs to send for HTTPS requests through 'HTTPS' protocol. ${carbon.home}/resources/security/client-truststore.jks Any valid path for the truststore file trustStorePassword The default password for the client-truststore to send HTTPS requests. wso2carbon Any string headers The headers that should be included as HTTP request headers in the scrape request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" Any valid http headers job The default job name of the exported Prometheus metrics that has to be fetched. Any valid job name instance The default instance of the exported Prometheus metrics that has to be fetched. Any valid instance name groupingKey The default grouping key of the required Prometheus metrics in key-value pairs. Grouping key is used if the metrics are exported by Prometheus pushGateway in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" Any valid grouping key pairs Examples EXAMPLE 1 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'counter', metric.name= 'sweet_production_counter', @map(type= 'keyvalue')) define stream FooStream1(metric_name string, metric_type string, help string, subtype string, name string, quantity string, value double); In this example, the prometheus source makes an http request to the 'target.url' and analyse the response. From the analysed response, the source retrieves the Prometheus counter metrics with the name, 'sweet_production_counter' and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps will have keys and values as follows: metric_name -> sweet_production_counter metric_type -> counter help -> <help_string_of_metric> subtype -> null name -> <value_of_label_name> quantity -> <value_of_label_quantity> value -> <value_of_metric> EXAMPLE 2 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'summary', metric.name= 'sweet_production_summary', @map(type= 'keyvalue')) define stream FooStream2(metric_name string, metric_type string, help string, subtype string, name string, quantity string, quantile string, value double); In this example, the prometheus source makes an http request to the 'target.url' and analyses the response. From the analysed response, the source retrieves the Prometheus summary metrics with the name, 'sweet_production_summary' and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_summary metric_type -> summary help -> <help_string_of_metric> subtype -> <'sum'/'count'/'null'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> quantile -> <value of the quantile> value -> <value_of_metric> EXAMPLE 3 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'histogram', metric.name= 'sweet_production_histogram', @map(type= 'keyvalue')) define stream FooStream3(metric_name string, metric_type string, help string, subtype string, name string, quantity string, le string, value double); In this example, the prometheus source will make an http request to the 'target.url' and analyse the response. From the analysed response, the source retrieves the Prometheus histogram metrics with name 'sweet_production_histogram' and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps will have keys and values as follows, metric_name -> sweet_production_histogram metric_type -> histogram help -> <help_string_of_metric> subtype -> <'sum'/'count'/'bucket'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> le -> <value of the bucket> value -> <value_of_metric>","title":"1.0.1"},{"location":"api/1.0.1/#api-docs-v101","text":"","title":"API Docs - v1.0.1"},{"location":"api/1.0.1/#sink","text":"","title":"Sink"},{"location":"api/1.0.1/#prometheus-sink","text":"The sink publishes events processed by Siddhi into Prometheus metrics and exposes them to Prometheus server at the provided url. The created metrics can be published to Prometheus through 'server' or 'pushGateway' publishing modes depending on the preference of the user. The server mode exposes the metrics through an http server at the provided url and the pushGateway mode pushes the metrics to pushGateway which must be running at the provided url. The metric types that are supported by Prometheus sink are counter, gauge, histogram and summary. The values and labels of the Prometheus metrics can be updated through the events. Syntax @sink(type=\"prometheus\", job=\"<STRING>\", publish.mode=\"<STRING>\", push.url=\"<STRING>\", server.url=\"<STRING>\", metric.type=\"<STRING>\", metric.help=\"<STRING>\", metric.name=\"<STRING>\", buckets=\"<STRING>\", quantiles=\"<STRING>\", quantile.error=\"<DOUBLE>\", value.attribute=\"<STRING>\", push.operation=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic job This parameter specifies the job name of the metric. The name must be the same job name as defined in the prometheus configuration file. siddhiJob STRING Yes No publish.mode This parameter specifies the mode of exposing metrics to Prometheus server.The possible publishing modes are 'server' and 'pushgateway'. server STRING Yes No push.url This parameter specifies the target url of the Prometheus pushGateway where the pushGateway must be listening. This url should be previously defined in prometheus configuration file as a target. http://localhost:9091 STRING Yes No server.url This parameter specifies the url where the http server is initiated to expose metrics for 'server' publish mode. This url must be previously defined in prometheus configuration file as a target. http://localhost:9080 STRING Yes No metric.type The type of Prometheus metric that has to be created at the sink. The supported metric types are 'counter', 'gauge', 'histogram' and 'summary'. STRING No No metric.help A brief description of the metric and its purpose. STRING Yes No metric.name This parameter specifies the user preferred name for the metric. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]*. STRING Yes No buckets The bucket values preferred by the user for histogram metrics. The bucket values must be in 'string' format with each bucket value separated by a comma. The expected format of the parameter is as follows: \"2,4,6,8\" null STRING Yes No quantiles The user preferred quantile values for summary metrics. The quantile values must be in 'string' format with each quantile value separated by a comma. The expected format of the parameter is as follows: \"0.5,0.75,0.95\" null STRING Yes No quantile.error The error tolerance value for calculating quantiles in summary metrics. This must be a positive value though less than 1. 0.001 DOUBLE Yes No value.attribute The name of the attribute in stream definition which specifies the metric value. The defined value attribute must be included inside the stream attributes. The value of the 'value' attribute that is published through events, increase the metric value for the counter and gauge metric types. For histogram and summary metric types, the values are observed. value STRING Yes No push.operation This parameter defines the mode for pushing metrics to pushGateway The available push operations are 'push' and 'pushadd'. The operations differ according to the existing metrics in pushGateway where 'push' operation replaces the existing metrics and 'pushadd' operation only updates the newly created metrics. pushadd STRING Yes No grouping.key This parameter specifies the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters jobName This is the property that specifies the default job name for the metric. The name must be the same job name as defined in the prometheus configuration file. siddhiJob Any string publishMode The default publish mode for the Prometheus sink for exposing metrics to Prometheus server. The mode can be either 'server' or 'pushgateway'. server server or pushgateway serverURL This property configures the url where the http server will be initiated to expose metrics. This url must be previously defined in prometheus configuration file as a target to be identified by Prometheus. By default, the http server will be initiated at 'http://localhost:9080' http://localhost:9080 Any valid URL pushURL This property configures the target url of Prometheus pushGateway where the pushGateway must be listening. This url should be previously defined in prometheus configuration file as a target to be identified by Prometheus. http://localhost:9091 Any valid URL groupingKey This property configures the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics under same job. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" . null Any key value pairs in the supported format Examples EXAMPLE 1 @sink(type='prometheus',job='fooOrderCount', server.url ='http://localhost:9080', publish.mode='server', metric.type='counter', metric.help= 'Number of foo orders', @map(type='keyvalue')) define stream FooCountStream (Name String, quantity int, value int); In the above example, the Prometheus-sink creates a counter metric with the stream name and defined attributes as labels. The metric is exposed through an http server at the target url. EXAMPLE 2 @sink(type='prometheus',job='inventoryLevel', push.url='http://localhost:9080', publish.mode='pushGateway', metric.type='gauge', metric.help= 'Current level of inventory', @map(type='keyvalue')) define stream InventoryLevelStream (Name String, value int); In the above example, the Prometheus-sink creates a gauge metric with the stream name and defined attributes as labels.The metric is pushed to Prometheus pushGateway at the target url.","title":"prometheus (Sink)"},{"location":"api/1.0.1/#source","text":"","title":"Source"},{"location":"api/1.0.1/#prometheus-source","text":"The source consumes Prometheus metrics which are exported from the specified url as Siddhi events, by making http requests to the url. According to the source configuration, it analyses metrics from the text response and sends them as Siddhi events through key-value mapping.The user can retrieve metrics of types including, counter, gauge, histogram and summary. Since the source retrieves the metrics from a text response of the target, it is advised to use 'string' as the attribute type for the attributes that correspond to Prometheus metric labels. Further, the Prometheus metric value is passed through the event as 'value'. Therefore, it is advisable to have an attribute with the name 'value' in the stream. The supported types for the attribute, 'value' are INT, LONG, FLOAT and DOUBLE. Syntax @source(type=\"prometheus\", target.url=\"<STRING>\", scrape.interval=\"<INT>\", scrape.timeout=\"<INT>\", scheme=\"<STRING>\", metric.name=\"<STRING>\", metric.type=\"<STRING>\", username=\"<STRING>\", password=\"<STRING>\", client.truststore.file=\"<STRING>\", client.truststore.password=\"<STRING>\", headers=\"<STRING>\", job=\"<STRING>\", instance=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic target.url This property specifies the target url where the Prometheus metrics are exported in text format. STRING No No scrape.interval This property specifies the time interval in seconds within which the source should make an HTTP request to the provided target url. 60 INT Yes No scrape.timeout This property is the time duration in seconds for a scrape request to get timed-out if the server at the url does not respond. 10 INT Yes No scheme This property specifies the scheme of the target URL. The supported schemes are 'HTTP' and 'HTTPS'. HTTP STRING Yes No metric.name This property specifies the name of the metrics that are to be fetched. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]* . Stream name STRING Yes No metric.type This property specifies the type of the Prometheus metric that is required to be fetched. The supported metric types are 'counter', 'gauge',\" 'histogram' and 'summary'. STRING No No username This property specifies the username that has to be added in the authorization header of the HTTP request, if basic authentication is enabled at the target. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the console. STRING Yes No password This property specifies the password that has to be added in the authorization header of the request, if the basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If one of the parameter is not given by user, then an error is logged in the console. STRING Yes No client.truststore.file The file path to the location of the truststore to which the client needs to send https requests through 'https' protocol. STRING Yes No client.truststore.password The password for client-truststore to send https requests. A custom password can be specified if required. STRING Yes No headers Headers that should be included as HTTP request headers in the request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" STRING Yes No job This property defines the job name of the exported Prometheus metrics that has to be fetched. STRING Yes No instance This property defines the instance of the exported Prometheus metrics that has to be fetched. STRING Yes No grouping.key This parameter specifies the grouping key of the required metrics in key-value pairs. Grouping key is used if the metrics are exported by Prometheus pushGateway in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters scrapeInterval The default time interval in seconds for the Prometheus source to make HTTP requests to the target URL. 60 Any integer value scrapeTimeout This default time duration (in seconds) for an HTTP request to time-out if the server at the URL does not respond. 10 Any integer value scheme The scheme of the target for Prometheus source to make HTTP requests. The supported schemes are HTTP and HTTPS. HTTP HTTP or HTTPS username The username that has to be added in the authorization header of the HTTP request, if basic authentication is enabled at the target. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the console. Any string password The password that has to be added in the authorization header of the HTTP request, if basic authentication is enabled at the target. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the console. Any string trustStoreFile The default file path to the location of truststore that the client needs to send for HTTPS requests through 'HTTPS' protocol. ${carbon.home}/resources/security/client-truststore.jks Any valid path for the truststore file trustStorePassword The default password for the client-truststore to send HTTPS requests. wso2carbon Any string headers The headers that should be included as HTTP request headers in the scrape request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" Any valid http headers job The default job name of the exported Prometheus metrics that has to be fetched. Any valid job name instance The default instance of the exported Prometheus metrics that has to be fetched. Any valid instance name groupingKey The default grouping key of the required Prometheus metrics in key-value pairs. Grouping key is used if the metrics are exported by Prometheus pushGateway in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" Any valid grouping key pairs Examples EXAMPLE 1 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'counter', metric.name= 'sweet_production_counter', @map(type= 'keyvalue')) define stream FooStream1(metric_name string, metric_type string, help string, subtype string, name string, quantity string, value double); In this example, the prometheus source makes an http request to the 'target.url' and analyse the response. From the analysed response, the source retrieves the Prometheus counter metrics with the name, 'sweet_production_counter' and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps will have keys and values as follows: metric_name -> sweet_production_counter metric_type -> counter help -> <help_string_of_metric> subtype -> null name -> <value_of_label_name> quantity -> <value_of_label_quantity> value -> <value_of_metric> EXAMPLE 2 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'summary', metric.name= 'sweet_production_summary', @map(type= 'keyvalue')) define stream FooStream2(metric_name string, metric_type string, help string, subtype string, name string, quantity string, quantile string, value double); In this example, the prometheus source makes an http request to the 'target.url' and analyses the response. From the analysed response, the source retrieves the Prometheus summary metrics with the name, 'sweet_production_summary' and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_summary metric_type -> summary help -> <help_string_of_metric> subtype -> <'sum'/'count'/'null'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> quantile -> <value of the quantile> value -> <value_of_metric> EXAMPLE 3 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'histogram', metric.name= 'sweet_production_histogram', @map(type= 'keyvalue')) define stream FooStream3(metric_name string, metric_type string, help string, subtype string, name string, quantity string, le string, value double); In this example, the prometheus source will make an http request to the 'target.url' and analyse the response. From the analysed response, the source retrieves the Prometheus histogram metrics with name 'sweet_production_histogram' and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps will have keys and values as follows, metric_name -> sweet_production_histogram metric_type -> histogram help -> <help_string_of_metric> subtype -> <'sum'/'count'/'bucket'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> le -> <value of the bucket> value -> <value_of_metric>","title":"prometheus (Source)"},{"location":"api/1.0.2/","text":"API Docs - v1.0.2 Sink prometheus (Sink) This sink publishes events processed by Siddhi into Prometheus metrics and exposes them to the Prometheus server at the specified URL. The created metrics can be published to Prometheus via 'server' or 'pushGateway', depending on your preference. The metric types that are supported by the Prometheus sink are 'counter', 'gauge', 'histogram', and 'summary'. The values and labels of the Prometheus metrics can be updated through the events. Syntax @sink(type=\"prometheus\", job=\"<STRING>\", publish.mode=\"<STRING>\", push.url=\"<STRING>\", server.url=\"<STRING>\", metric.type=\"<STRING>\", metric.help=\"<STRING>\", metric.name=\"<STRING>\", buckets=\"<STRING>\", quantiles=\"<STRING>\", quantile.error=\"<DOUBLE>\", value.attribute=\"<STRING>\", push.operation=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic job This parameter specifies the job name of the metric. This must be the same job name that is defined in the Prometheus configuration file. siddhiJob STRING Yes No publish.mode The mode in which the metrics need to be exposed to the Prometheus server.The possible publishing modes are 'server' and 'pushgateway'.The server mode exposes the metrics through an HTTP server at the specified URL, and the 'pushGateway' mode pushes the metrics to the pushGateway that needs to be running at the specified URL. server STRING Yes No push.url This parameter specifies the target URL of the Prometheus pushGateway. This is the URL at which the pushGateway must be listening. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9091 STRING Yes No server.url This parameter specifies the URL where the HTTP server is initiated to expose metrics in the 'server' publish mode. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9080 STRING Yes No metric.type The type of Prometheus metric that needs to be created at the sink. The supported metric types are 'counter', 'gauge',c'histogram' and 'summary'. STRING No No metric.help A brief description of the metric and its purpose. STRING Yes No metric.name This parameter allows you to assign a preferred name for the metric. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]*. STRING Yes No buckets The bucket values preferred by the user for histogram metrics. The bucket values must be in the 'string' format with each bucket value separated by a comma as shown in the example below. \"2,4,6,8\" null STRING Yes No quantiles This parameter allows you to specify quantile values for summary metrics as preferred. The quantile values must be in the 'string' format with each quantile value separated by a comma as shown in the example below. \"0.5,0.75,0.95\" null STRING Yes No quantile.error The error tolerance value for calculating quantiles in summary metrics. This must be a positive value, but less than 1. 0.001 DOUBLE Yes No value.attribute The name of the attribute in the stream definition that specifies the metric value. The defined 'value' attribute must be included in the stream definition. The system increases the metric value for the counter and gauge metric types by the value of the 'value attribute. The system observes the value of the 'value' attribute for the calculations of 'summary' and 'histogram' metric types. value STRING Yes No push.operation This parameter defines the mode for pushing metrics to the pushGateway. The available push operations are 'push' and 'pushadd'. The operations differ according to the existing metrics in pushGateway where 'push' operation replaces the existing metrics, and 'pushadd' operation only updates the newly created metrics. pushadd STRING Yes No grouping.key This parameter specifies the grouping key of created metrics in key-value pairs. The grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters jobName This property specifies the default job name for the metric. This job name must be the same as the job name defined in the Prometheus configuration file. siddhiJob Any string publishMode The default publish mode for the Prometheus sink for exposing metrics to the Prometheus server. The mode can be either 'server' or 'pushgateway'. server server or pushgateway serverURL This property configures the URL where the HTTP server is initiated to expose metrics. This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. By default, the HTTP server is initiated at 'http://localhost:9080'. http://localhost:9080 Any valid URL pushURL This property configures the target URL of the Prometheus pushGateway (where the pushGateway needs to listen). This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. http://localhost:9091 Any valid URL groupingKey This property configures the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish these metrics from already existing metrics under the same job. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" . null Any key value pairs in the supported format Examples EXAMPLE 1 @sink(type='prometheus',job='fooOrderCount', server.url ='http://localhost:9080', publish.mode='server', metric.type='counter', metric.help= 'Number of foo orders', @map(type='keyvalue')) define stream FooCountStream (Name String, quantity int, value int); In the above example, the Prometheus-sink creates a counter metric with the stream name and defined attributes as labels. The metric is exposed through an HTTP server at the target URL. EXAMPLE 2 @sink(type='prometheus',job='inventoryLevel', push.url='http://localhost:9080', publish.mode='pushGateway', metric.type='gauge', metric.help= 'Current level of inventory', @map(type='keyvalue')) define stream InventoryLevelStream (Name String, value int); In the above example, the Prometheus-sink creates a gauge metric with the stream name and defined attributes as labels.The metric is pushed to the Prometheus pushGateway at the target URL. Source prometheus (Source) This source consumes Prometheus metrics that are exported from a specified URL as Siddhi events by sending HTTP requests to the URL. Based on the source configuration, it analyzes metrics from the text response and sends them as Siddhi events through key-value mapping.The user can retrieve metrics of the 'including', 'counter', 'gauge', 'histogram', and 'summary' types. The source retrieves the metrics from a text response of the target. Therefore, it is you need to use 'string' as the attribute type for the attributes that correspond with the Prometheus metric labels. Further, the Prometheus metric value is passed through the event as 'value'. This requires you to include an attribute named 'value' in the stream definition. The supported types for the 'value' attribute are 'INT', 'LONG', 'FLOAT', and 'DOUBLE'. Syntax @source(type=\"prometheus\", target.url=\"<STRING>\", scrape.interval=\"<INT>\", scrape.timeout=\"<INT>\", scheme=\"<STRING>\", metric.name=\"<STRING>\", metric.type=\"<STRING>\", username=\"<STRING>\", password=\"<STRING>\", client.truststore.file=\"<STRING>\", client.truststore.password=\"<STRING>\", headers=\"<STRING>\", job=\"<STRING>\", instance=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic target.url This property specifies the target URL to which the Prometheus metrics are exported in the 'TEXT' format. STRING No No scrape.interval This property specifies the time interval in seconds within which the source should send an HTTP request to the specified target URL. 60 INT Yes No scrape.timeout This property is the time duration in seconds for a scrape request to get timed-out if the server at the URL does not respond. 10 INT Yes No scheme This property specifies the scheme of the target URL. The supported schemes are 'HTTP' and 'HTTPS'. HTTP STRING Yes No metric.name This property specifies the name of the metrics that are to be fetched. The metric name must match the regex format, i.e., '[a-zA-Z_:][a-zA-Z0-9_:]* '. Stream name STRING Yes No metric.type This property specifies the type of the Prometheus metric that is required to be fetched. The supported metric types are 'counter', 'gauge',\" 'histogram', and 'summary'. STRING No No username This property specifies the username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No password This property specifies the password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No client.truststore.file The file path to the location of the truststore to which the client needs to send HTTPS requests via the 'HTTPS' protocol. STRING Yes No client.truststore.password The password for the client-truststore. This is required to send HTTPS requests. A custom password can be specified if required. STRING Yes No headers Headers that need to be included as HTTP request headers in the request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" STRING Yes No job This property defines the job name of the exported Prometheus metrics that needs to be fetched. STRING Yes No instance This property defines the instance of the exported Prometheus metrics that needs to be fetched. STRING Yes No grouping.key This parameter specifies the grouping key of the required metrics in key-value pairs. The grouping key is used if the metrics are exported by Prometheus 'pushGateway' in order to distinguish those metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters scrapeInterval The default time interval in seconds for the Prometheus source to send HTTP requests to the target URL. 60 Any integer value scrapeTimeout The default time duration (in seconds) for an HTTP request to time-out if the server at the URL does not respond. 10 Any integer value scheme The scheme of the target for the Prometheus source to send HTTP requests. The supported schemes are 'HTTP' and 'HTTPS'. HTTP HTTP or HTTPS username The username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string password The password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string trustStoreFile The default file path to the location of truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. ${carbon.home}/resources/security/client-truststore.jks Any valid path for the truststore file trustStorePassword The default password for the client-truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. wso2carbon Any string headers The headers that need to be included as HTTP request headers in the scrape request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" Any valid http headers job The default job name of the exported Prometheus metrics that needs to be fetched. Any valid job name instance The default instance of the exported Prometheus metrics that needs to be fetched. Any valid instance name groupingKey The default grouping key of the required Prometheus metrics in key-value pairs. The grouping key is used if the metrics are exported by the Prometheus pushGateway in order to distinguish these metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" Any valid grouping key pairs Examples EXAMPLE 1 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'counter', metric.name= 'sweet_production_counter', @map(type= 'keyvalue')) define stream FooStream1(metric_name string, metric_type string, help string, subtype string, name string, quantity string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus counter metrics with the 'sweet_production_counter' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_counter metric_type -> counter help -> <help_string_of_metric> subtype -> null name -> <value_of_label_name> quantity -> <value_of_label_quantity> value -> <value_of_metric> EXAMPLE 2 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'summary', metric.name= 'sweet_production_summary', @map(type= 'keyvalue')) define stream FooStream2(metric_name string, metric_type string, help string, subtype string, name string, quantity string, quantile string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analysed response, the source retrieves the Prometheus summary metrics with the 'sweet_production_summary' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_summary metric_type -> summary help -> <help_string_of_metric> subtype -> <'sum'/'count'/'null'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> quantile -> <value of the quantile> value -> <value_of_metric> EXAMPLE 3 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'histogram', metric.name= 'sweet_production_histogram', @map(type= 'keyvalue')) define stream FooStream3(metric_name string, metric_type string, help string, subtype string, name string, quantity string, le string, value double); In this example, the prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus histogram metrics with the 'sweet_production_histogram' name and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows, metric_name -> sweet_production_histogram metric_type -> histogram help -> <help_string_of_metric> subtype -> <'sum'/'count'/'bucket'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> le -> <value of the bucket> value -> <value_of_metric>","title":"1.0.2"},{"location":"api/1.0.2/#api-docs-v102","text":"","title":"API Docs - v1.0.2"},{"location":"api/1.0.2/#sink","text":"","title":"Sink"},{"location":"api/1.0.2/#prometheus-sink","text":"This sink publishes events processed by Siddhi into Prometheus metrics and exposes them to the Prometheus server at the specified URL. The created metrics can be published to Prometheus via 'server' or 'pushGateway', depending on your preference. The metric types that are supported by the Prometheus sink are 'counter', 'gauge', 'histogram', and 'summary'. The values and labels of the Prometheus metrics can be updated through the events. Syntax @sink(type=\"prometheus\", job=\"<STRING>\", publish.mode=\"<STRING>\", push.url=\"<STRING>\", server.url=\"<STRING>\", metric.type=\"<STRING>\", metric.help=\"<STRING>\", metric.name=\"<STRING>\", buckets=\"<STRING>\", quantiles=\"<STRING>\", quantile.error=\"<DOUBLE>\", value.attribute=\"<STRING>\", push.operation=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic job This parameter specifies the job name of the metric. This must be the same job name that is defined in the Prometheus configuration file. siddhiJob STRING Yes No publish.mode The mode in which the metrics need to be exposed to the Prometheus server.The possible publishing modes are 'server' and 'pushgateway'.The server mode exposes the metrics through an HTTP server at the specified URL, and the 'pushGateway' mode pushes the metrics to the pushGateway that needs to be running at the specified URL. server STRING Yes No push.url This parameter specifies the target URL of the Prometheus pushGateway. This is the URL at which the pushGateway must be listening. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9091 STRING Yes No server.url This parameter specifies the URL where the HTTP server is initiated to expose metrics in the 'server' publish mode. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9080 STRING Yes No metric.type The type of Prometheus metric that needs to be created at the sink. The supported metric types are 'counter', 'gauge',c'histogram' and 'summary'. STRING No No metric.help A brief description of the metric and its purpose. STRING Yes No metric.name This parameter allows you to assign a preferred name for the metric. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]*. STRING Yes No buckets The bucket values preferred by the user for histogram metrics. The bucket values must be in the 'string' format with each bucket value separated by a comma as shown in the example below. \"2,4,6,8\" null STRING Yes No quantiles This parameter allows you to specify quantile values for summary metrics as preferred. The quantile values must be in the 'string' format with each quantile value separated by a comma as shown in the example below. \"0.5,0.75,0.95\" null STRING Yes No quantile.error The error tolerance value for calculating quantiles in summary metrics. This must be a positive value, but less than 1. 0.001 DOUBLE Yes No value.attribute The name of the attribute in the stream definition that specifies the metric value. The defined 'value' attribute must be included in the stream definition. The system increases the metric value for the counter and gauge metric types by the value of the 'value attribute. The system observes the value of the 'value' attribute for the calculations of 'summary' and 'histogram' metric types. value STRING Yes No push.operation This parameter defines the mode for pushing metrics to the pushGateway. The available push operations are 'push' and 'pushadd'. The operations differ according to the existing metrics in pushGateway where 'push' operation replaces the existing metrics, and 'pushadd' operation only updates the newly created metrics. pushadd STRING Yes No grouping.key This parameter specifies the grouping key of created metrics in key-value pairs. The grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters jobName This property specifies the default job name for the metric. This job name must be the same as the job name defined in the Prometheus configuration file. siddhiJob Any string publishMode The default publish mode for the Prometheus sink for exposing metrics to the Prometheus server. The mode can be either 'server' or 'pushgateway'. server server or pushgateway serverURL This property configures the URL where the HTTP server is initiated to expose metrics. This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. By default, the HTTP server is initiated at 'http://localhost:9080'. http://localhost:9080 Any valid URL pushURL This property configures the target URL of the Prometheus pushGateway (where the pushGateway needs to listen). This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. http://localhost:9091 Any valid URL groupingKey This property configures the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish these metrics from already existing metrics under the same job. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" . null Any key value pairs in the supported format Examples EXAMPLE 1 @sink(type='prometheus',job='fooOrderCount', server.url ='http://localhost:9080', publish.mode='server', metric.type='counter', metric.help= 'Number of foo orders', @map(type='keyvalue')) define stream FooCountStream (Name String, quantity int, value int); In the above example, the Prometheus-sink creates a counter metric with the stream name and defined attributes as labels. The metric is exposed through an HTTP server at the target URL. EXAMPLE 2 @sink(type='prometheus',job='inventoryLevel', push.url='http://localhost:9080', publish.mode='pushGateway', metric.type='gauge', metric.help= 'Current level of inventory', @map(type='keyvalue')) define stream InventoryLevelStream (Name String, value int); In the above example, the Prometheus-sink creates a gauge metric with the stream name and defined attributes as labels.The metric is pushed to the Prometheus pushGateway at the target URL.","title":"prometheus (Sink)"},{"location":"api/1.0.2/#source","text":"","title":"Source"},{"location":"api/1.0.2/#prometheus-source","text":"This source consumes Prometheus metrics that are exported from a specified URL as Siddhi events by sending HTTP requests to the URL. Based on the source configuration, it analyzes metrics from the text response and sends them as Siddhi events through key-value mapping.The user can retrieve metrics of the 'including', 'counter', 'gauge', 'histogram', and 'summary' types. The source retrieves the metrics from a text response of the target. Therefore, it is you need to use 'string' as the attribute type for the attributes that correspond with the Prometheus metric labels. Further, the Prometheus metric value is passed through the event as 'value'. This requires you to include an attribute named 'value' in the stream definition. The supported types for the 'value' attribute are 'INT', 'LONG', 'FLOAT', and 'DOUBLE'. Syntax @source(type=\"prometheus\", target.url=\"<STRING>\", scrape.interval=\"<INT>\", scrape.timeout=\"<INT>\", scheme=\"<STRING>\", metric.name=\"<STRING>\", metric.type=\"<STRING>\", username=\"<STRING>\", password=\"<STRING>\", client.truststore.file=\"<STRING>\", client.truststore.password=\"<STRING>\", headers=\"<STRING>\", job=\"<STRING>\", instance=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic target.url This property specifies the target URL to which the Prometheus metrics are exported in the 'TEXT' format. STRING No No scrape.interval This property specifies the time interval in seconds within which the source should send an HTTP request to the specified target URL. 60 INT Yes No scrape.timeout This property is the time duration in seconds for a scrape request to get timed-out if the server at the URL does not respond. 10 INT Yes No scheme This property specifies the scheme of the target URL. The supported schemes are 'HTTP' and 'HTTPS'. HTTP STRING Yes No metric.name This property specifies the name of the metrics that are to be fetched. The metric name must match the regex format, i.e., '[a-zA-Z_:][a-zA-Z0-9_:]* '. Stream name STRING Yes No metric.type This property specifies the type of the Prometheus metric that is required to be fetched. The supported metric types are 'counter', 'gauge',\" 'histogram', and 'summary'. STRING No No username This property specifies the username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No password This property specifies the password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No client.truststore.file The file path to the location of the truststore to which the client needs to send HTTPS requests via the 'HTTPS' protocol. STRING Yes No client.truststore.password The password for the client-truststore. This is required to send HTTPS requests. A custom password can be specified if required. STRING Yes No headers Headers that need to be included as HTTP request headers in the request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" STRING Yes No job This property defines the job name of the exported Prometheus metrics that needs to be fetched. STRING Yes No instance This property defines the instance of the exported Prometheus metrics that needs to be fetched. STRING Yes No grouping.key This parameter specifies the grouping key of the required metrics in key-value pairs. The grouping key is used if the metrics are exported by Prometheus 'pushGateway' in order to distinguish those metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters scrapeInterval The default time interval in seconds for the Prometheus source to send HTTP requests to the target URL. 60 Any integer value scrapeTimeout The default time duration (in seconds) for an HTTP request to time-out if the server at the URL does not respond. 10 Any integer value scheme The scheme of the target for the Prometheus source to send HTTP requests. The supported schemes are 'HTTP' and 'HTTPS'. HTTP HTTP or HTTPS username The username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string password The password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string trustStoreFile The default file path to the location of truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. ${carbon.home}/resources/security/client-truststore.jks Any valid path for the truststore file trustStorePassword The default password for the client-truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. wso2carbon Any string headers The headers that need to be included as HTTP request headers in the scrape request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" Any valid http headers job The default job name of the exported Prometheus metrics that needs to be fetched. Any valid job name instance The default instance of the exported Prometheus metrics that needs to be fetched. Any valid instance name groupingKey The default grouping key of the required Prometheus metrics in key-value pairs. The grouping key is used if the metrics are exported by the Prometheus pushGateway in order to distinguish these metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" Any valid grouping key pairs Examples EXAMPLE 1 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'counter', metric.name= 'sweet_production_counter', @map(type= 'keyvalue')) define stream FooStream1(metric_name string, metric_type string, help string, subtype string, name string, quantity string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus counter metrics with the 'sweet_production_counter' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_counter metric_type -> counter help -> <help_string_of_metric> subtype -> null name -> <value_of_label_name> quantity -> <value_of_label_quantity> value -> <value_of_metric> EXAMPLE 2 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'summary', metric.name= 'sweet_production_summary', @map(type= 'keyvalue')) define stream FooStream2(metric_name string, metric_type string, help string, subtype string, name string, quantity string, quantile string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analysed response, the source retrieves the Prometheus summary metrics with the 'sweet_production_summary' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_summary metric_type -> summary help -> <help_string_of_metric> subtype -> <'sum'/'count'/'null'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> quantile -> <value of the quantile> value -> <value_of_metric> EXAMPLE 3 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'histogram', metric.name= 'sweet_production_histogram', @map(type= 'keyvalue')) define stream FooStream3(metric_name string, metric_type string, help string, subtype string, name string, quantity string, le string, value double); In this example, the prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus histogram metrics with the 'sweet_production_histogram' name and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows, metric_name -> sweet_production_histogram metric_type -> histogram help -> <help_string_of_metric> subtype -> <'sum'/'count'/'bucket'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> le -> <value of the bucket> value -> <value_of_metric>","title":"prometheus (Source)"},{"location":"api/1.0.3/","text":"API Docs - v1.0.3 Sink prometheus (Sink) This sink publishes events processed by Siddhi into Prometheus metrics and exposes them to the Prometheus server at the specified URL. The created metrics can be published to Prometheus via 'server' or 'pushGateway', depending on your preference. The metric types that are supported by the Prometheus sink are 'counter', 'gauge', 'histogram', and 'summary'. The values and labels of the Prometheus metrics can be updated through the events. Syntax @sink(type=\"prometheus\", job=\"<STRING>\", publish.mode=\"<STRING>\", push.url=\"<STRING>\", server.url=\"<STRING>\", metric.type=\"<STRING>\", metric.help=\"<STRING>\", metric.name=\"<STRING>\", buckets=\"<STRING>\", quantiles=\"<STRING>\", quantile.error=\"<DOUBLE>\", value.attribute=\"<STRING>\", push.operation=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic job This parameter specifies the job name of the metric. This must be the same job name that is defined in the Prometheus configuration file. siddhiJob STRING Yes No publish.mode The mode in which the metrics need to be exposed to the Prometheus server.The possible publishing modes are 'server' and 'pushgateway'.The server mode exposes the metrics through an HTTP server at the specified URL, and the 'pushGateway' mode pushes the metrics to the pushGateway that needs to be running at the specified URL. server STRING Yes No push.url This parameter specifies the target URL of the Prometheus pushGateway. This is the URL at which the pushGateway must be listening. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9091 STRING Yes No server.url This parameter specifies the URL where the HTTP server is initiated to expose metrics in the 'server' publish mode. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9080 STRING Yes No metric.type The type of Prometheus metric that needs to be created at the sink. The supported metric types are 'counter', 'gauge',c'histogram' and 'summary'. STRING No No metric.help A brief description of the metric and its purpose. STRING Yes No metric.name This parameter allows you to assign a preferred name for the metric. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]*. STRING Yes No buckets The bucket values preferred by the user for histogram metrics. The bucket values must be in the 'string' format with each bucket value separated by a comma as shown in the example below. \"2,4,6,8\" null STRING Yes No quantiles This parameter allows you to specify quantile values for summary metrics as preferred. The quantile values must be in the 'string' format with each quantile value separated by a comma as shown in the example below. \"0.5,0.75,0.95\" null STRING Yes No quantile.error The error tolerance value for calculating quantiles in summary metrics. This must be a positive value, but less than 1. 0.001 DOUBLE Yes No value.attribute The name of the attribute in the stream definition that specifies the metric value. The defined 'value' attribute must be included in the stream definition. The system increases the metric value for the counter and gauge metric types by the value of the 'value attribute. The system observes the value of the 'value' attribute for the calculations of 'summary' and 'histogram' metric types. value STRING Yes No push.operation This parameter defines the mode for pushing metrics to the pushGateway. The available push operations are 'push' and 'pushadd'. The operations differ according to the existing metrics in pushGateway where 'push' operation replaces the existing metrics, and 'pushadd' operation only updates the newly created metrics. pushadd STRING Yes No grouping.key This parameter specifies the grouping key of created metrics in key-value pairs. The grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters jobName This property specifies the default job name for the metric. This job name must be the same as the job name defined in the Prometheus configuration file. siddhiJob Any string publishMode The default publish mode for the Prometheus sink for exposing metrics to the Prometheus server. The mode can be either 'server' or 'pushgateway'. server server or pushgateway serverURL This property configures the URL where the HTTP server is initiated to expose metrics. This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. By default, the HTTP server is initiated at 'http://localhost:9080'. http://localhost:9080 Any valid URL pushURL This property configures the target URL of the Prometheus pushGateway (where the pushGateway needs to listen). This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. http://localhost:9091 Any valid URL groupingKey This property configures the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish these metrics from already existing metrics under the same job. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" . null Any key value pairs in the supported format Examples EXAMPLE 1 @sink(type='prometheus',job='fooOrderCount', server.url ='http://localhost:9080', publish.mode='server', metric.type='counter', metric.help= 'Number of foo orders', @map(type='keyvalue')) define stream FooCountStream (Name String, quantity int, value int); In the above example, the Prometheus-sink creates a counter metric with the stream name and defined attributes as labels. The metric is exposed through an HTTP server at the target URL. EXAMPLE 2 @sink(type='prometheus',job='inventoryLevel', push.url='http://localhost:9080', publish.mode='pushGateway', metric.type='gauge', metric.help= 'Current level of inventory', @map(type='keyvalue')) define stream InventoryLevelStream (Name String, value int); In the above example, the Prometheus-sink creates a gauge metric with the stream name and defined attributes as labels.The metric is pushed to the Prometheus pushGateway at the target URL. Source prometheus (Source) This source consumes Prometheus metrics that are exported from a specified URL as Siddhi events by sending HTTP requests to the URL. Based on the source configuration, it analyzes metrics from the text response and sends them as Siddhi events through key-value mapping.The user can retrieve metrics of the 'including', 'counter', 'gauge', 'histogram', and 'summary' types. The source retrieves the metrics from a text response of the target. Therefore, it is you need to use 'string' as the attribute type for the attributes that correspond with the Prometheus metric labels. Further, the Prometheus metric value is passed through the event as 'value'. This requires you to include an attribute named 'value' in the stream definition. The supported types for the 'value' attribute are 'INT', 'LONG', 'FLOAT', and 'DOUBLE'. Syntax @source(type=\"prometheus\", target.url=\"<STRING>\", scrape.interval=\"<INT>\", scrape.timeout=\"<INT>\", scheme=\"<STRING>\", metric.name=\"<STRING>\", metric.type=\"<STRING>\", username=\"<STRING>\", password=\"<STRING>\", client.truststore.file=\"<STRING>\", client.truststore.password=\"<STRING>\", headers=\"<STRING>\", job=\"<STRING>\", instance=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic target.url This property specifies the target URL to which the Prometheus metrics are exported in the 'TEXT' format. STRING No No scrape.interval This property specifies the time interval in seconds within which the source should send an HTTP request to the specified target URL. 60 INT Yes No scrape.timeout This property is the time duration in seconds for a scrape request to get timed-out if the server at the URL does not respond. 10 INT Yes No scheme This property specifies the scheme of the target URL. The supported schemes are 'HTTP' and 'HTTPS'. HTTP STRING Yes No metric.name This property specifies the name of the metrics that are to be fetched. The metric name must match the regex format, i.e., '[a-zA-Z_:][a-zA-Z0-9_:]* '. Stream name STRING Yes No metric.type This property specifies the type of the Prometheus metric that is required to be fetched. The supported metric types are 'counter', 'gauge',\" 'histogram', and 'summary'. STRING No No username This property specifies the username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No password This property specifies the password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No client.truststore.file The file path to the location of the truststore to which the client needs to send HTTPS requests via the 'HTTPS' protocol. STRING Yes No client.truststore.password The password for the client-truststore. This is required to send HTTPS requests. A custom password can be specified if required. STRING Yes No headers Headers that need to be included as HTTP request headers in the request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" STRING Yes No job This property defines the job name of the exported Prometheus metrics that needs to be fetched. STRING Yes No instance This property defines the instance of the exported Prometheus metrics that needs to be fetched. STRING Yes No grouping.key This parameter specifies the grouping key of the required metrics in key-value pairs. The grouping key is used if the metrics are exported by Prometheus 'pushGateway' in order to distinguish those metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters scrapeInterval The default time interval in seconds for the Prometheus source to send HTTP requests to the target URL. 60 Any integer value scrapeTimeout The default time duration (in seconds) for an HTTP request to time-out if the server at the URL does not respond. 10 Any integer value scheme The scheme of the target for the Prometheus source to send HTTP requests. The supported schemes are 'HTTP' and 'HTTPS'. HTTP HTTP or HTTPS username The username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string password The password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string trustStoreFile The default file path to the location of truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. ${carbon.home}/resources/security/client-truststore.jks Any valid path for the truststore file trustStorePassword The default password for the client-truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. wso2carbon Any string headers The headers that need to be included as HTTP request headers in the scrape request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" Any valid http headers job The default job name of the exported Prometheus metrics that needs to be fetched. Any valid job name instance The default instance of the exported Prometheus metrics that needs to be fetched. Any valid instance name groupingKey The default grouping key of the required Prometheus metrics in key-value pairs. The grouping key is used if the metrics are exported by the Prometheus pushGateway in order to distinguish these metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" Any valid grouping key pairs Examples EXAMPLE 1 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'counter', metric.name= 'sweet_production_counter', @map(type= 'keyvalue')) define stream FooStream1(metric_name string, metric_type string, help string, subtype string, name string, quantity string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus counter metrics with the 'sweet_production_counter' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_counter metric_type -> counter help -> <help_string_of_metric> subtype -> null name -> <value_of_label_name> quantity -> <value_of_label_quantity> value -> <value_of_metric> EXAMPLE 2 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'summary', metric.name= 'sweet_production_summary', @map(type= 'keyvalue')) define stream FooStream2(metric_name string, metric_type string, help string, subtype string, name string, quantity string, quantile string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analysed response, the source retrieves the Prometheus summary metrics with the 'sweet_production_summary' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_summary metric_type -> summary help -> <help_string_of_metric> subtype -> <'sum'/'count'/'null'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> quantile -> <value of the quantile> value -> <value_of_metric> EXAMPLE 3 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'histogram', metric.name= 'sweet_production_histogram', @map(type= 'keyvalue')) define stream FooStream3(metric_name string, metric_type string, help string, subtype string, name string, quantity string, le string, value double); In this example, the prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus histogram metrics with the 'sweet_production_histogram' name and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows, metric_name -> sweet_production_histogram metric_type -> histogram help -> <help_string_of_metric> subtype -> <'sum'/'count'/'bucket'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> le -> <value of the bucket> value -> <value_of_metric>","title":"1.0.3"},{"location":"api/1.0.3/#api-docs-v103","text":"","title":"API Docs - v1.0.3"},{"location":"api/1.0.3/#sink","text":"","title":"Sink"},{"location":"api/1.0.3/#prometheus-sink","text":"This sink publishes events processed by Siddhi into Prometheus metrics and exposes them to the Prometheus server at the specified URL. The created metrics can be published to Prometheus via 'server' or 'pushGateway', depending on your preference. The metric types that are supported by the Prometheus sink are 'counter', 'gauge', 'histogram', and 'summary'. The values and labels of the Prometheus metrics can be updated through the events. Syntax @sink(type=\"prometheus\", job=\"<STRING>\", publish.mode=\"<STRING>\", push.url=\"<STRING>\", server.url=\"<STRING>\", metric.type=\"<STRING>\", metric.help=\"<STRING>\", metric.name=\"<STRING>\", buckets=\"<STRING>\", quantiles=\"<STRING>\", quantile.error=\"<DOUBLE>\", value.attribute=\"<STRING>\", push.operation=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic job This parameter specifies the job name of the metric. This must be the same job name that is defined in the Prometheus configuration file. siddhiJob STRING Yes No publish.mode The mode in which the metrics need to be exposed to the Prometheus server.The possible publishing modes are 'server' and 'pushgateway'.The server mode exposes the metrics through an HTTP server at the specified URL, and the 'pushGateway' mode pushes the metrics to the pushGateway that needs to be running at the specified URL. server STRING Yes No push.url This parameter specifies the target URL of the Prometheus pushGateway. This is the URL at which the pushGateway must be listening. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9091 STRING Yes No server.url This parameter specifies the URL where the HTTP server is initiated to expose metrics in the 'server' publish mode. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9080 STRING Yes No metric.type The type of Prometheus metric that needs to be created at the sink. The supported metric types are 'counter', 'gauge',c'histogram' and 'summary'. STRING No No metric.help A brief description of the metric and its purpose. STRING Yes No metric.name This parameter allows you to assign a preferred name for the metric. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]*. STRING Yes No buckets The bucket values preferred by the user for histogram metrics. The bucket values must be in the 'string' format with each bucket value separated by a comma as shown in the example below. \"2,4,6,8\" null STRING Yes No quantiles This parameter allows you to specify quantile values for summary metrics as preferred. The quantile values must be in the 'string' format with each quantile value separated by a comma as shown in the example below. \"0.5,0.75,0.95\" null STRING Yes No quantile.error The error tolerance value for calculating quantiles in summary metrics. This must be a positive value, but less than 1. 0.001 DOUBLE Yes No value.attribute The name of the attribute in the stream definition that specifies the metric value. The defined 'value' attribute must be included in the stream definition. The system increases the metric value for the counter and gauge metric types by the value of the 'value attribute. The system observes the value of the 'value' attribute for the calculations of 'summary' and 'histogram' metric types. value STRING Yes No push.operation This parameter defines the mode for pushing metrics to the pushGateway. The available push operations are 'push' and 'pushadd'. The operations differ according to the existing metrics in pushGateway where 'push' operation replaces the existing metrics, and 'pushadd' operation only updates the newly created metrics. pushadd STRING Yes No grouping.key This parameter specifies the grouping key of created metrics in key-value pairs. The grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters jobName This property specifies the default job name for the metric. This job name must be the same as the job name defined in the Prometheus configuration file. siddhiJob Any string publishMode The default publish mode for the Prometheus sink for exposing metrics to the Prometheus server. The mode can be either 'server' or 'pushgateway'. server server or pushgateway serverURL This property configures the URL where the HTTP server is initiated to expose metrics. This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. By default, the HTTP server is initiated at 'http://localhost:9080'. http://localhost:9080 Any valid URL pushURL This property configures the target URL of the Prometheus pushGateway (where the pushGateway needs to listen). This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. http://localhost:9091 Any valid URL groupingKey This property configures the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish these metrics from already existing metrics under the same job. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" . null Any key value pairs in the supported format Examples EXAMPLE 1 @sink(type='prometheus',job='fooOrderCount', server.url ='http://localhost:9080', publish.mode='server', metric.type='counter', metric.help= 'Number of foo orders', @map(type='keyvalue')) define stream FooCountStream (Name String, quantity int, value int); In the above example, the Prometheus-sink creates a counter metric with the stream name and defined attributes as labels. The metric is exposed through an HTTP server at the target URL. EXAMPLE 2 @sink(type='prometheus',job='inventoryLevel', push.url='http://localhost:9080', publish.mode='pushGateway', metric.type='gauge', metric.help= 'Current level of inventory', @map(type='keyvalue')) define stream InventoryLevelStream (Name String, value int); In the above example, the Prometheus-sink creates a gauge metric with the stream name and defined attributes as labels.The metric is pushed to the Prometheus pushGateway at the target URL.","title":"prometheus (Sink)"},{"location":"api/1.0.3/#source","text":"","title":"Source"},{"location":"api/1.0.3/#prometheus-source","text":"This source consumes Prometheus metrics that are exported from a specified URL as Siddhi events by sending HTTP requests to the URL. Based on the source configuration, it analyzes metrics from the text response and sends them as Siddhi events through key-value mapping.The user can retrieve metrics of the 'including', 'counter', 'gauge', 'histogram', and 'summary' types. The source retrieves the metrics from a text response of the target. Therefore, it is you need to use 'string' as the attribute type for the attributes that correspond with the Prometheus metric labels. Further, the Prometheus metric value is passed through the event as 'value'. This requires you to include an attribute named 'value' in the stream definition. The supported types for the 'value' attribute are 'INT', 'LONG', 'FLOAT', and 'DOUBLE'. Syntax @source(type=\"prometheus\", target.url=\"<STRING>\", scrape.interval=\"<INT>\", scrape.timeout=\"<INT>\", scheme=\"<STRING>\", metric.name=\"<STRING>\", metric.type=\"<STRING>\", username=\"<STRING>\", password=\"<STRING>\", client.truststore.file=\"<STRING>\", client.truststore.password=\"<STRING>\", headers=\"<STRING>\", job=\"<STRING>\", instance=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic target.url This property specifies the target URL to which the Prometheus metrics are exported in the 'TEXT' format. STRING No No scrape.interval This property specifies the time interval in seconds within which the source should send an HTTP request to the specified target URL. 60 INT Yes No scrape.timeout This property is the time duration in seconds for a scrape request to get timed-out if the server at the URL does not respond. 10 INT Yes No scheme This property specifies the scheme of the target URL. The supported schemes are 'HTTP' and 'HTTPS'. HTTP STRING Yes No metric.name This property specifies the name of the metrics that are to be fetched. The metric name must match the regex format, i.e., '[a-zA-Z_:][a-zA-Z0-9_:]* '. Stream name STRING Yes No metric.type This property specifies the type of the Prometheus metric that is required to be fetched. The supported metric types are 'counter', 'gauge',\" 'histogram', and 'summary'. STRING No No username This property specifies the username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No password This property specifies the password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No client.truststore.file The file path to the location of the truststore to which the client needs to send HTTPS requests via the 'HTTPS' protocol. STRING Yes No client.truststore.password The password for the client-truststore. This is required to send HTTPS requests. A custom password can be specified if required. STRING Yes No headers Headers that need to be included as HTTP request headers in the request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" STRING Yes No job This property defines the job name of the exported Prometheus metrics that needs to be fetched. STRING Yes No instance This property defines the instance of the exported Prometheus metrics that needs to be fetched. STRING Yes No grouping.key This parameter specifies the grouping key of the required metrics in key-value pairs. The grouping key is used if the metrics are exported by Prometheus 'pushGateway' in order to distinguish those metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters scrapeInterval The default time interval in seconds for the Prometheus source to send HTTP requests to the target URL. 60 Any integer value scrapeTimeout The default time duration (in seconds) for an HTTP request to time-out if the server at the URL does not respond. 10 Any integer value scheme The scheme of the target for the Prometheus source to send HTTP requests. The supported schemes are 'HTTP' and 'HTTPS'. HTTP HTTP or HTTPS username The username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string password The password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string trustStoreFile The default file path to the location of truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. ${carbon.home}/resources/security/client-truststore.jks Any valid path for the truststore file trustStorePassword The default password for the client-truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. wso2carbon Any string headers The headers that need to be included as HTTP request headers in the scrape request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" Any valid http headers job The default job name of the exported Prometheus metrics that needs to be fetched. Any valid job name instance The default instance of the exported Prometheus metrics that needs to be fetched. Any valid instance name groupingKey The default grouping key of the required Prometheus metrics in key-value pairs. The grouping key is used if the metrics are exported by the Prometheus pushGateway in order to distinguish these metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" Any valid grouping key pairs Examples EXAMPLE 1 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'counter', metric.name= 'sweet_production_counter', @map(type= 'keyvalue')) define stream FooStream1(metric_name string, metric_type string, help string, subtype string, name string, quantity string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus counter metrics with the 'sweet_production_counter' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_counter metric_type -> counter help -> <help_string_of_metric> subtype -> null name -> <value_of_label_name> quantity -> <value_of_label_quantity> value -> <value_of_metric> EXAMPLE 2 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'summary', metric.name= 'sweet_production_summary', @map(type= 'keyvalue')) define stream FooStream2(metric_name string, metric_type string, help string, subtype string, name string, quantity string, quantile string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analysed response, the source retrieves the Prometheus summary metrics with the 'sweet_production_summary' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_summary metric_type -> summary help -> <help_string_of_metric> subtype -> <'sum'/'count'/'null'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> quantile -> <value of the quantile> value -> <value_of_metric> EXAMPLE 3 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'histogram', metric.name= 'sweet_production_histogram', @map(type= 'keyvalue')) define stream FooStream3(metric_name string, metric_type string, help string, subtype string, name string, quantity string, le string, value double); In this example, the prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus histogram metrics with the 'sweet_production_histogram' name and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows, metric_name -> sweet_production_histogram metric_type -> histogram help -> <help_string_of_metric> subtype -> <'sum'/'count'/'bucket'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> le -> <value of the bucket> value -> <value_of_metric>","title":"prometheus (Source)"},{"location":"api/2.0.0/","text":"API Docs - v2.0.0 Sink prometheus (Sink) This sink publishes events processed by Siddhi into Prometheus metrics and exposes them to the Prometheus server at the specified URL. The created metrics can be published to Prometheus via 'server' or 'pushGateway', depending on your preference. The metric types that are supported by the Prometheus sink are 'counter', 'gauge', 'histogram', and 'summary'. The values and labels of the Prometheus metrics can be updated through the events. Syntax @sink(type=\"prometheus\", job=\"<STRING>\", publish.mode=\"<STRING>\", push.url=\"<STRING>\", server.url=\"<STRING>\", metric.type=\"<STRING>\", metric.help=\"<STRING>\", metric.name=\"<STRING>\", buckets=\"<STRING>\", quantiles=\"<STRING>\", quantile.error=\"<DOUBLE>\", value.attribute=\"<STRING>\", push.operation=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic job This parameter specifies the job name of the metric. This must be the same job name that is defined in the Prometheus configuration file. siddhiJob STRING Yes No publish.mode The mode in which the metrics need to be exposed to the Prometheus server.The possible publishing modes are 'server' and 'pushgateway'.The server mode exposes the metrics through an HTTP server at the specified URL, and the 'pushGateway' mode pushes the metrics to the pushGateway that needs to be running at the specified URL. server STRING Yes No push.url This parameter specifies the target URL of the Prometheus pushGateway. This is the URL at which the pushGateway must be listening. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9091 STRING Yes No server.url This parameter specifies the URL where the HTTP server is initiated to expose metrics in the 'server' publish mode. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9080 STRING Yes No metric.type The type of Prometheus metric that needs to be created at the sink. The supported metric types are 'counter', 'gauge',c'histogram' and 'summary'. STRING No No metric.help A brief description of the metric and its purpose. STRING Yes No metric.name This parameter allows you to assign a preferred name for the metric. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]*. STRING Yes No buckets The bucket values preferred by the user for histogram metrics. The bucket values must be in the 'string' format with each bucket value separated by a comma as shown in the example below. \"2,4,6,8\" null STRING Yes No quantiles This parameter allows you to specify quantile values for summary metrics as preferred. The quantile values must be in the 'string' format with each quantile value separated by a comma as shown in the example below. \"0.5,0.75,0.95\" null STRING Yes No quantile.error The error tolerance value for calculating quantiles in summary metrics. This must be a positive value, but less than 1. 0.001 DOUBLE Yes No value.attribute The name of the attribute in the stream definition that specifies the metric value. The defined 'value' attribute must be included in the stream definition. The system increases the metric value for the counter and gauge metric types by the value of the 'value attribute. The system observes the value of the 'value' attribute for the calculations of 'summary' and 'histogram' metric types. value STRING Yes No push.operation This parameter defines the mode for pushing metrics to the pushGateway. The available push operations are 'push' and 'pushadd'. The operations differ according to the existing metrics in pushGateway where 'push' operation replaces the existing metrics, and 'pushadd' operation only updates the newly created metrics. pushadd STRING Yes No grouping.key This parameter specifies the grouping key of created metrics in key-value pairs. The grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters jobName This property specifies the default job name for the metric. This job name must be the same as the job name defined in the Prometheus configuration file. siddhiJob Any string publishMode The default publish mode for the Prometheus sink for exposing metrics to the Prometheus server. The mode can be either 'server' or 'pushgateway'. server server or pushgateway serverURL This property configures the URL where the HTTP server is initiated to expose metrics. This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. By default, the HTTP server is initiated at 'http://localhost:9080'. http://localhost:9080 Any valid URL pushURL This property configures the target URL of the Prometheus pushGateway (where the pushGateway needs to listen). This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. http://localhost:9091 Any valid URL groupingKey This property configures the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish these metrics from already existing metrics under the same job. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" . null Any key value pairs in the supported format Examples EXAMPLE 1 @sink(type='prometheus',job='fooOrderCount', server.url ='http://localhost:9080', publish.mode='server', metric.type='counter', metric.help= 'Number of foo orders', @map(type='keyvalue')) define stream FooCountStream (Name String, quantity int, value int); In the above example, the Prometheus-sink creates a counter metric with the stream name and defined attributes as labels. The metric is exposed through an HTTP server at the target URL. EXAMPLE 2 @sink(type='prometheus',job='inventoryLevel', push.url='http://localhost:9080', publish.mode='pushGateway', metric.type='gauge', metric.help= 'Current level of inventory', @map(type='keyvalue')) define stream InventoryLevelStream (Name String, value int); In the above example, the Prometheus-sink creates a gauge metric with the stream name and defined attributes as labels.The metric is pushed to the Prometheus pushGateway at the target URL. Source prometheus (Source) This source consumes Prometheus metrics that are exported from a specified URL as Siddhi events by sending HTTP requests to the URL. Based on the source configuration, it analyzes metrics from the text response and sends them as Siddhi events through key-value mapping.The user can retrieve metrics of the 'including', 'counter', 'gauge', 'histogram', and 'summary' types. The source retrieves the metrics from a text response of the target. Therefore, it is you need to use 'string' as the attribute type for the attributes that correspond with the Prometheus metric labels. Further, the Prometheus metric value is passed through the event as 'value'. This requires you to include an attribute named 'value' in the stream definition. The supported types for the 'value' attribute are 'INT', 'LONG', 'FLOAT', and 'DOUBLE'. Syntax @source(type=\"prometheus\", target.url=\"<STRING>\", scrape.interval=\"<INT>\", scrape.timeout=\"<INT>\", scheme=\"<STRING>\", metric.name=\"<STRING>\", metric.type=\"<STRING>\", username=\"<STRING>\", password=\"<STRING>\", client.truststore.file=\"<STRING>\", client.truststore.password=\"<STRING>\", headers=\"<STRING>\", job=\"<STRING>\", instance=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic target.url This property specifies the target URL to which the Prometheus metrics are exported in the 'TEXT' format. STRING No No scrape.interval This property specifies the time interval in seconds within which the source should send an HTTP request to the specified target URL. 60 INT Yes No scrape.timeout This property is the time duration in seconds for a scrape request to get timed-out if the server at the URL does not respond. 10 INT Yes No scheme This property specifies the scheme of the target URL. The supported schemes are 'HTTP' and 'HTTPS'. HTTP STRING Yes No metric.name This property specifies the name of the metrics that are to be fetched. The metric name must match the regex format, i.e., '[a-zA-Z_:][a-zA-Z0-9_:]* '. Stream name STRING Yes No metric.type This property specifies the type of the Prometheus metric that is required to be fetched. The supported metric types are 'counter', 'gauge',\" 'histogram', and 'summary'. STRING No No username This property specifies the username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No password This property specifies the password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No client.truststore.file The file path to the location of the truststore to which the client needs to send HTTPS requests via the 'HTTPS' protocol. STRING Yes No client.truststore.password The password for the client-truststore. This is required to send HTTPS requests. A custom password can be specified if required. STRING Yes No headers Headers that need to be included as HTTP request headers in the request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" STRING Yes No job This property defines the job name of the exported Prometheus metrics that needs to be fetched. STRING Yes No instance This property defines the instance of the exported Prometheus metrics that needs to be fetched. STRING Yes No grouping.key This parameter specifies the grouping key of the required metrics in key-value pairs. The grouping key is used if the metrics are exported by Prometheus 'pushGateway' in order to distinguish those metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters scrapeInterval The default time interval in seconds for the Prometheus source to send HTTP requests to the target URL. 60 Any integer value scrapeTimeout The default time duration (in seconds) for an HTTP request to time-out if the server at the URL does not respond. 10 Any integer value scheme The scheme of the target for the Prometheus source to send HTTP requests. The supported schemes are 'HTTP' and 'HTTPS'. HTTP HTTP or HTTPS username The username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string password The password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string trustStoreFile The default file path to the location of truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. ${carbon.home}/resources/security/client-truststore.jks Any valid path for the truststore file trustStorePassword The default password for the client-truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. wso2carbon Any string headers The headers that need to be included as HTTP request headers in the scrape request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" Any valid http headers job The default job name of the exported Prometheus metrics that needs to be fetched. Any valid job name instance The default instance of the exported Prometheus metrics that needs to be fetched. Any valid instance name groupingKey The default grouping key of the required Prometheus metrics in key-value pairs. The grouping key is used if the metrics are exported by the Prometheus pushGateway in order to distinguish these metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" Any valid grouping key pairs Examples EXAMPLE 1 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'counter', metric.name= 'sweet_production_counter', @map(type= 'keyvalue')) define stream FooStream1(metric_name string, metric_type string, help string, subtype string, name string, quantity string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus counter metrics with the 'sweet_production_counter' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_counter metric_type -> counter help -> <help_string_of_metric> subtype -> null name -> <value_of_label_name> quantity -> <value_of_label_quantity> value -> <value_of_metric> EXAMPLE 2 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'summary', metric.name= 'sweet_production_summary', @map(type= 'keyvalue')) define stream FooStream2(metric_name string, metric_type string, help string, subtype string, name string, quantity string, quantile string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analysed response, the source retrieves the Prometheus summary metrics with the 'sweet_production_summary' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_summary metric_type -> summary help -> <help_string_of_metric> subtype -> <'sum'/'count'/'null'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> quantile -> <value of the quantile> value -> <value_of_metric> EXAMPLE 3 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'histogram', metric.name= 'sweet_production_histogram', @map(type= 'keyvalue')) define stream FooStream3(metric_name string, metric_type string, help string, subtype string, name string, quantity string, le string, value double); In this example, the prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus histogram metrics with the 'sweet_production_histogram' name and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows, metric_name -> sweet_production_histogram metric_type -> histogram help -> <help_string_of_metric> subtype -> <'sum'/'count'/'bucket'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> le -> <value of the bucket> value -> <value_of_metric>","title":"2.0.0"},{"location":"api/2.0.0/#api-docs-v200","text":"","title":"API Docs - v2.0.0"},{"location":"api/2.0.0/#sink","text":"","title":"Sink"},{"location":"api/2.0.0/#prometheus-sink","text":"This sink publishes events processed by Siddhi into Prometheus metrics and exposes them to the Prometheus server at the specified URL. The created metrics can be published to Prometheus via 'server' or 'pushGateway', depending on your preference. The metric types that are supported by the Prometheus sink are 'counter', 'gauge', 'histogram', and 'summary'. The values and labels of the Prometheus metrics can be updated through the events. Syntax @sink(type=\"prometheus\", job=\"<STRING>\", publish.mode=\"<STRING>\", push.url=\"<STRING>\", server.url=\"<STRING>\", metric.type=\"<STRING>\", metric.help=\"<STRING>\", metric.name=\"<STRING>\", buckets=\"<STRING>\", quantiles=\"<STRING>\", quantile.error=\"<DOUBLE>\", value.attribute=\"<STRING>\", push.operation=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic job This parameter specifies the job name of the metric. This must be the same job name that is defined in the Prometheus configuration file. siddhiJob STRING Yes No publish.mode The mode in which the metrics need to be exposed to the Prometheus server.The possible publishing modes are 'server' and 'pushgateway'.The server mode exposes the metrics through an HTTP server at the specified URL, and the 'pushGateway' mode pushes the metrics to the pushGateway that needs to be running at the specified URL. server STRING Yes No push.url This parameter specifies the target URL of the Prometheus pushGateway. This is the URL at which the pushGateway must be listening. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9091 STRING Yes No server.url This parameter specifies the URL where the HTTP server is initiated to expose metrics in the 'server' publish mode. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9080 STRING Yes No metric.type The type of Prometheus metric that needs to be created at the sink. The supported metric types are 'counter', 'gauge',c'histogram' and 'summary'. STRING No No metric.help A brief description of the metric and its purpose. STRING Yes No metric.name This parameter allows you to assign a preferred name for the metric. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]*. STRING Yes No buckets The bucket values preferred by the user for histogram metrics. The bucket values must be in the 'string' format with each bucket value separated by a comma as shown in the example below. \"2,4,6,8\" null STRING Yes No quantiles This parameter allows you to specify quantile values for summary metrics as preferred. The quantile values must be in the 'string' format with each quantile value separated by a comma as shown in the example below. \"0.5,0.75,0.95\" null STRING Yes No quantile.error The error tolerance value for calculating quantiles in summary metrics. This must be a positive value, but less than 1. 0.001 DOUBLE Yes No value.attribute The name of the attribute in the stream definition that specifies the metric value. The defined 'value' attribute must be included in the stream definition. The system increases the metric value for the counter and gauge metric types by the value of the 'value attribute. The system observes the value of the 'value' attribute for the calculations of 'summary' and 'histogram' metric types. value STRING Yes No push.operation This parameter defines the mode for pushing metrics to the pushGateway. The available push operations are 'push' and 'pushadd'. The operations differ according to the existing metrics in pushGateway where 'push' operation replaces the existing metrics, and 'pushadd' operation only updates the newly created metrics. pushadd STRING Yes No grouping.key This parameter specifies the grouping key of created metrics in key-value pairs. The grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters jobName This property specifies the default job name for the metric. This job name must be the same as the job name defined in the Prometheus configuration file. siddhiJob Any string publishMode The default publish mode for the Prometheus sink for exposing metrics to the Prometheus server. The mode can be either 'server' or 'pushgateway'. server server or pushgateway serverURL This property configures the URL where the HTTP server is initiated to expose metrics. This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. By default, the HTTP server is initiated at 'http://localhost:9080'. http://localhost:9080 Any valid URL pushURL This property configures the target URL of the Prometheus pushGateway (where the pushGateway needs to listen). This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. http://localhost:9091 Any valid URL groupingKey This property configures the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish these metrics from already existing metrics under the same job. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" . null Any key value pairs in the supported format Examples EXAMPLE 1 @sink(type='prometheus',job='fooOrderCount', server.url ='http://localhost:9080', publish.mode='server', metric.type='counter', metric.help= 'Number of foo orders', @map(type='keyvalue')) define stream FooCountStream (Name String, quantity int, value int); In the above example, the Prometheus-sink creates a counter metric with the stream name and defined attributes as labels. The metric is exposed through an HTTP server at the target URL. EXAMPLE 2 @sink(type='prometheus',job='inventoryLevel', push.url='http://localhost:9080', publish.mode='pushGateway', metric.type='gauge', metric.help= 'Current level of inventory', @map(type='keyvalue')) define stream InventoryLevelStream (Name String, value int); In the above example, the Prometheus-sink creates a gauge metric with the stream name and defined attributes as labels.The metric is pushed to the Prometheus pushGateway at the target URL.","title":"prometheus (Sink)"},{"location":"api/2.0.0/#source","text":"","title":"Source"},{"location":"api/2.0.0/#prometheus-source","text":"This source consumes Prometheus metrics that are exported from a specified URL as Siddhi events by sending HTTP requests to the URL. Based on the source configuration, it analyzes metrics from the text response and sends them as Siddhi events through key-value mapping.The user can retrieve metrics of the 'including', 'counter', 'gauge', 'histogram', and 'summary' types. The source retrieves the metrics from a text response of the target. Therefore, it is you need to use 'string' as the attribute type for the attributes that correspond with the Prometheus metric labels. Further, the Prometheus metric value is passed through the event as 'value'. This requires you to include an attribute named 'value' in the stream definition. The supported types for the 'value' attribute are 'INT', 'LONG', 'FLOAT', and 'DOUBLE'. Syntax @source(type=\"prometheus\", target.url=\"<STRING>\", scrape.interval=\"<INT>\", scrape.timeout=\"<INT>\", scheme=\"<STRING>\", metric.name=\"<STRING>\", metric.type=\"<STRING>\", username=\"<STRING>\", password=\"<STRING>\", client.truststore.file=\"<STRING>\", client.truststore.password=\"<STRING>\", headers=\"<STRING>\", job=\"<STRING>\", instance=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic target.url This property specifies the target URL to which the Prometheus metrics are exported in the 'TEXT' format. STRING No No scrape.interval This property specifies the time interval in seconds within which the source should send an HTTP request to the specified target URL. 60 INT Yes No scrape.timeout This property is the time duration in seconds for a scrape request to get timed-out if the server at the URL does not respond. 10 INT Yes No scheme This property specifies the scheme of the target URL. The supported schemes are 'HTTP' and 'HTTPS'. HTTP STRING Yes No metric.name This property specifies the name of the metrics that are to be fetched. The metric name must match the regex format, i.e., '[a-zA-Z_:][a-zA-Z0-9_:]* '. Stream name STRING Yes No metric.type This property specifies the type of the Prometheus metric that is required to be fetched. The supported metric types are 'counter', 'gauge',\" 'histogram', and 'summary'. STRING No No username This property specifies the username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No password This property specifies the password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No client.truststore.file The file path to the location of the truststore to which the client needs to send HTTPS requests via the 'HTTPS' protocol. STRING Yes No client.truststore.password The password for the client-truststore. This is required to send HTTPS requests. A custom password can be specified if required. STRING Yes No headers Headers that need to be included as HTTP request headers in the request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" STRING Yes No job This property defines the job name of the exported Prometheus metrics that needs to be fetched. STRING Yes No instance This property defines the instance of the exported Prometheus metrics that needs to be fetched. STRING Yes No grouping.key This parameter specifies the grouping key of the required metrics in key-value pairs. The grouping key is used if the metrics are exported by Prometheus 'pushGateway' in order to distinguish those metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters scrapeInterval The default time interval in seconds for the Prometheus source to send HTTP requests to the target URL. 60 Any integer value scrapeTimeout The default time duration (in seconds) for an HTTP request to time-out if the server at the URL does not respond. 10 Any integer value scheme The scheme of the target for the Prometheus source to send HTTP requests. The supported schemes are 'HTTP' and 'HTTPS'. HTTP HTTP or HTTPS username The username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string password The password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string trustStoreFile The default file path to the location of truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. ${carbon.home}/resources/security/client-truststore.jks Any valid path for the truststore file trustStorePassword The default password for the client-truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. wso2carbon Any string headers The headers that need to be included as HTTP request headers in the scrape request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" Any valid http headers job The default job name of the exported Prometheus metrics that needs to be fetched. Any valid job name instance The default instance of the exported Prometheus metrics that needs to be fetched. Any valid instance name groupingKey The default grouping key of the required Prometheus metrics in key-value pairs. The grouping key is used if the metrics are exported by the Prometheus pushGateway in order to distinguish these metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" Any valid grouping key pairs Examples EXAMPLE 1 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'counter', metric.name= 'sweet_production_counter', @map(type= 'keyvalue')) define stream FooStream1(metric_name string, metric_type string, help string, subtype string, name string, quantity string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus counter metrics with the 'sweet_production_counter' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_counter metric_type -> counter help -> <help_string_of_metric> subtype -> null name -> <value_of_label_name> quantity -> <value_of_label_quantity> value -> <value_of_metric> EXAMPLE 2 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'summary', metric.name= 'sweet_production_summary', @map(type= 'keyvalue')) define stream FooStream2(metric_name string, metric_type string, help string, subtype string, name string, quantity string, quantile string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analysed response, the source retrieves the Prometheus summary metrics with the 'sweet_production_summary' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_summary metric_type -> summary help -> <help_string_of_metric> subtype -> <'sum'/'count'/'null'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> quantile -> <value of the quantile> value -> <value_of_metric> EXAMPLE 3 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'histogram', metric.name= 'sweet_production_histogram', @map(type= 'keyvalue')) define stream FooStream3(metric_name string, metric_type string, help string, subtype string, name string, quantity string, le string, value double); In this example, the prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus histogram metrics with the 'sweet_production_histogram' name and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows, metric_name -> sweet_production_histogram metric_type -> histogram help -> <help_string_of_metric> subtype -> <'sum'/'count'/'bucket'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> le -> <value of the bucket> value -> <value_of_metric>","title":"prometheus (Source)"},{"location":"api/2.0.1/","text":"API Docs - v2.0.1 Tested Siddhi Core version: 5.0.0 It could also support other Siddhi Core minor versions. Sink prometheus (Sink) This sink publishes events processed by Siddhi into Prometheus metrics and exposes them to the Prometheus server at the specified URL. The created metrics can be published to Prometheus via 'server' or 'pushGateway', depending on your preference. The metric types that are supported by the Prometheus sink are 'counter', 'gauge', 'histogram', and 'summary'. The values and labels of the Prometheus metrics can be updated through the events. Syntax @sink(type=\"prometheus\", job=\"<STRING>\", publish.mode=\"<STRING>\", push.url=\"<STRING>\", server.url=\"<STRING>\", metric.type=\"<STRING>\", metric.help=\"<STRING>\", metric.name=\"<STRING>\", buckets=\"<STRING>\", quantiles=\"<STRING>\", quantile.error=\"<DOUBLE>\", value.attribute=\"<STRING>\", push.operation=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic job This parameter specifies the job name of the metric. This must be the same job name that is defined in the Prometheus configuration file. siddhiJob STRING Yes No publish.mode The mode in which the metrics need to be exposed to the Prometheus server.The possible publishing modes are 'server' and 'pushgateway'.The server mode exposes the metrics through an HTTP server at the specified URL, and the 'pushGateway' mode pushes the metrics to the pushGateway that needs to be running at the specified URL. server STRING Yes No push.url This parameter specifies the target URL of the Prometheus pushGateway. This is the URL at which the pushGateway must be listening. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9091 STRING Yes No server.url This parameter specifies the URL where the HTTP server is initiated to expose metrics in the 'server' publish mode. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9080 STRING Yes No metric.type The type of Prometheus metric that needs to be created at the sink. The supported metric types are 'counter', 'gauge',c'histogram' and 'summary'. STRING No No metric.help A brief description of the metric and its purpose. STRING Yes No metric.name This parameter allows you to assign a preferred name for the metric. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]*. STRING Yes No buckets The bucket values preferred by the user for histogram metrics. The bucket values must be in the 'string' format with each bucket value separated by a comma as shown in the example below. \"2,4,6,8\" null STRING Yes No quantiles This parameter allows you to specify quantile values for summary metrics as preferred. The quantile values must be in the 'string' format with each quantile value separated by a comma as shown in the example below. \"0.5,0.75,0.95\" null STRING Yes No quantile.error The error tolerance value for calculating quantiles in summary metrics. This must be a positive value, but less than 1. 0.001 DOUBLE Yes No value.attribute The name of the attribute in the stream definition that specifies the metric value. The defined 'value' attribute must be included in the stream definition. The system increases the metric value for the counter and gauge metric types by the value of the 'value attribute. The system observes the value of the 'value' attribute for the calculations of 'summary' and 'histogram' metric types. value STRING Yes No push.operation This parameter defines the mode for pushing metrics to the pushGateway. The available push operations are 'push' and 'pushadd'. The operations differ according to the existing metrics in pushGateway where 'push' operation replaces the existing metrics, and 'pushadd' operation only updates the newly created metrics. pushadd STRING Yes No grouping.key This parameter specifies the grouping key of created metrics in key-value pairs. The grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters jobName This property specifies the default job name for the metric. This job name must be the same as the job name defined in the Prometheus configuration file. siddhiJob Any string publishMode The default publish mode for the Prometheus sink for exposing metrics to the Prometheus server. The mode can be either 'server' or 'pushgateway'. server server or pushgateway serverURL This property configures the URL where the HTTP server is initiated to expose metrics. This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. By default, the HTTP server is initiated at 'http://localhost:9080'. http://localhost:9080 Any valid URL pushURL This property configures the target URL of the Prometheus pushGateway (where the pushGateway needs to listen). This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. http://localhost:9091 Any valid URL groupingKey This property configures the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish these metrics from already existing metrics under the same job. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" . null Any key value pairs in the supported format Examples EXAMPLE 1 @sink(type='prometheus',job='fooOrderCount', server.url ='http://localhost:9080', publish.mode='server', metric.type='counter', metric.help= 'Number of foo orders', @map(type='keyvalue')) define stream FooCountStream (Name String, quantity int, value int); In the above example, the Prometheus-sink creates a counter metric with the stream name and defined attributes as labels. The metric is exposed through an HTTP server at the target URL. EXAMPLE 2 @sink(type='prometheus',job='inventoryLevel', push.url='http://localhost:9080', publish.mode='pushGateway', metric.type='gauge', metric.help= 'Current level of inventory', @map(type='keyvalue')) define stream InventoryLevelStream (Name String, value int); In the above example, the Prometheus-sink creates a gauge metric with the stream name and defined attributes as labels.The metric is pushed to the Prometheus pushGateway at the target URL. Source prometheus (Source) This source consumes Prometheus metrics that are exported from a specified URL as Siddhi events by sending HTTP requests to the URL. Based on the source configuration, it analyzes metrics from the text response and sends them as Siddhi events through key-value mapping.The user can retrieve metrics of the 'including', 'counter', 'gauge', 'histogram', and 'summary' types. The source retrieves the metrics from a text response of the target. Therefore, it is you need to use 'string' as the attribute type for the attributes that correspond with the Prometheus metric labels. Further, the Prometheus metric value is passed through the event as 'value'. This requires you to include an attribute named 'value' in the stream definition. The supported types for the 'value' attribute are 'INT', 'LONG', 'FLOAT', and 'DOUBLE'. Syntax @source(type=\"prometheus\", target.url=\"<STRING>\", scrape.interval=\"<INT>\", scrape.timeout=\"<INT>\", scheme=\"<STRING>\", metric.name=\"<STRING>\", metric.type=\"<STRING>\", username=\"<STRING>\", password=\"<STRING>\", client.truststore.file=\"<STRING>\", client.truststore.password=\"<STRING>\", headers=\"<STRING>\", job=\"<STRING>\", instance=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic target.url This property specifies the target URL to which the Prometheus metrics are exported in the 'TEXT' format. STRING No No scrape.interval This property specifies the time interval in seconds within which the source should send an HTTP request to the specified target URL. 60 INT Yes No scrape.timeout This property is the time duration in seconds for a scrape request to get timed-out if the server at the URL does not respond. 10 INT Yes No scheme This property specifies the scheme of the target URL. The supported schemes are 'HTTP' and 'HTTPS'. HTTP STRING Yes No metric.name This property specifies the name of the metrics that are to be fetched. The metric name must match the regex format, i.e., '[a-zA-Z_:][a-zA-Z0-9_:]* '. Stream name STRING Yes No metric.type This property specifies the type of the Prometheus metric that is required to be fetched. The supported metric types are 'counter', 'gauge',\" 'histogram', and 'summary'. STRING No No username This property specifies the username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No password This property specifies the password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No client.truststore.file The file path to the location of the truststore to which the client needs to send HTTPS requests via the 'HTTPS' protocol. STRING Yes No client.truststore.password The password for the client-truststore. This is required to send HTTPS requests. A custom password can be specified if required. STRING Yes No headers Headers that need to be included as HTTP request headers in the request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" STRING Yes No job This property defines the job name of the exported Prometheus metrics that needs to be fetched. STRING Yes No instance This property defines the instance of the exported Prometheus metrics that needs to be fetched. STRING Yes No grouping.key This parameter specifies the grouping key of the required metrics in key-value pairs. The grouping key is used if the metrics are exported by Prometheus 'pushGateway' in order to distinguish those metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters scrapeInterval The default time interval in seconds for the Prometheus source to send HTTP requests to the target URL. 60 Any integer value scrapeTimeout The default time duration (in seconds) for an HTTP request to time-out if the server at the URL does not respond. 10 Any integer value scheme The scheme of the target for the Prometheus source to send HTTP requests. The supported schemes are 'HTTP' and 'HTTPS'. HTTP HTTP or HTTPS username The username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string password The password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string trustStoreFile The default file path to the location of truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. ${carbon.home}/resources/security/client-truststore.jks Any valid path for the truststore file trustStorePassword The default password for the client-truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. wso2carbon Any string headers The headers that need to be included as HTTP request headers in the scrape request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" Any valid http headers job The default job name of the exported Prometheus metrics that needs to be fetched. Any valid job name instance The default instance of the exported Prometheus metrics that needs to be fetched. Any valid instance name groupingKey The default grouping key of the required Prometheus metrics in key-value pairs. The grouping key is used if the metrics are exported by the Prometheus pushGateway in order to distinguish these metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" Any valid grouping key pairs Examples EXAMPLE 1 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'counter', metric.name= 'sweet_production_counter', @map(type= 'keyvalue')) define stream FooStream1(metric_name string, metric_type string, help string, subtype string, name string, quantity string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus counter metrics with the 'sweet_production_counter' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_counter metric_type -> counter help -> <help_string_of_metric> subtype -> null name -> <value_of_label_name> quantity -> <value_of_label_quantity> value -> <value_of_metric> EXAMPLE 2 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'summary', metric.name= 'sweet_production_summary', @map(type= 'keyvalue')) define stream FooStream2(metric_name string, metric_type string, help string, subtype string, name string, quantity string, quantile string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analysed response, the source retrieves the Prometheus summary metrics with the 'sweet_production_summary' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_summary metric_type -> summary help -> <help_string_of_metric> subtype -> <'sum'/'count'/'null'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> quantile -> <value of the quantile> value -> <value_of_metric> EXAMPLE 3 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'histogram', metric.name= 'sweet_production_histogram', @map(type= 'keyvalue')) define stream FooStream3(metric_name string, metric_type string, help string, subtype string, name string, quantity string, le string, value double); In this example, the prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus histogram metrics with the 'sweet_production_histogram' name and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows, metric_name -> sweet_production_histogram metric_type -> histogram help -> <help_string_of_metric> subtype -> <'sum'/'count'/'bucket'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> le -> <value of the bucket> value -> <value_of_metric>","title":"2.0.1"},{"location":"api/2.0.1/#api-docs-v201","text":"Tested Siddhi Core version: 5.0.0 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.1"},{"location":"api/2.0.1/#sink","text":"","title":"Sink"},{"location":"api/2.0.1/#prometheus-sink","text":"This sink publishes events processed by Siddhi into Prometheus metrics and exposes them to the Prometheus server at the specified URL. The created metrics can be published to Prometheus via 'server' or 'pushGateway', depending on your preference. The metric types that are supported by the Prometheus sink are 'counter', 'gauge', 'histogram', and 'summary'. The values and labels of the Prometheus metrics can be updated through the events. Syntax @sink(type=\"prometheus\", job=\"<STRING>\", publish.mode=\"<STRING>\", push.url=\"<STRING>\", server.url=\"<STRING>\", metric.type=\"<STRING>\", metric.help=\"<STRING>\", metric.name=\"<STRING>\", buckets=\"<STRING>\", quantiles=\"<STRING>\", quantile.error=\"<DOUBLE>\", value.attribute=\"<STRING>\", push.operation=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic job This parameter specifies the job name of the metric. This must be the same job name that is defined in the Prometheus configuration file. siddhiJob STRING Yes No publish.mode The mode in which the metrics need to be exposed to the Prometheus server.The possible publishing modes are 'server' and 'pushgateway'.The server mode exposes the metrics through an HTTP server at the specified URL, and the 'pushGateway' mode pushes the metrics to the pushGateway that needs to be running at the specified URL. server STRING Yes No push.url This parameter specifies the target URL of the Prometheus pushGateway. This is the URL at which the pushGateway must be listening. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9091 STRING Yes No server.url This parameter specifies the URL where the HTTP server is initiated to expose metrics in the 'server' publish mode. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9080 STRING Yes No metric.type The type of Prometheus metric that needs to be created at the sink. The supported metric types are 'counter', 'gauge',c'histogram' and 'summary'. STRING No No metric.help A brief description of the metric and its purpose. STRING Yes No metric.name This parameter allows you to assign a preferred name for the metric. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]*. STRING Yes No buckets The bucket values preferred by the user for histogram metrics. The bucket values must be in the 'string' format with each bucket value separated by a comma as shown in the example below. \"2,4,6,8\" null STRING Yes No quantiles This parameter allows you to specify quantile values for summary metrics as preferred. The quantile values must be in the 'string' format with each quantile value separated by a comma as shown in the example below. \"0.5,0.75,0.95\" null STRING Yes No quantile.error The error tolerance value for calculating quantiles in summary metrics. This must be a positive value, but less than 1. 0.001 DOUBLE Yes No value.attribute The name of the attribute in the stream definition that specifies the metric value. The defined 'value' attribute must be included in the stream definition. The system increases the metric value for the counter and gauge metric types by the value of the 'value attribute. The system observes the value of the 'value' attribute for the calculations of 'summary' and 'histogram' metric types. value STRING Yes No push.operation This parameter defines the mode for pushing metrics to the pushGateway. The available push operations are 'push' and 'pushadd'. The operations differ according to the existing metrics in pushGateway where 'push' operation replaces the existing metrics, and 'pushadd' operation only updates the newly created metrics. pushadd STRING Yes No grouping.key This parameter specifies the grouping key of created metrics in key-value pairs. The grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters jobName This property specifies the default job name for the metric. This job name must be the same as the job name defined in the Prometheus configuration file. siddhiJob Any string publishMode The default publish mode for the Prometheus sink for exposing metrics to the Prometheus server. The mode can be either 'server' or 'pushgateway'. server server or pushgateway serverURL This property configures the URL where the HTTP server is initiated to expose metrics. This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. By default, the HTTP server is initiated at 'http://localhost:9080'. http://localhost:9080 Any valid URL pushURL This property configures the target URL of the Prometheus pushGateway (where the pushGateway needs to listen). This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. http://localhost:9091 Any valid URL groupingKey This property configures the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish these metrics from already existing metrics under the same job. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" . null Any key value pairs in the supported format Examples EXAMPLE 1 @sink(type='prometheus',job='fooOrderCount', server.url ='http://localhost:9080', publish.mode='server', metric.type='counter', metric.help= 'Number of foo orders', @map(type='keyvalue')) define stream FooCountStream (Name String, quantity int, value int); In the above example, the Prometheus-sink creates a counter metric with the stream name and defined attributes as labels. The metric is exposed through an HTTP server at the target URL. EXAMPLE 2 @sink(type='prometheus',job='inventoryLevel', push.url='http://localhost:9080', publish.mode='pushGateway', metric.type='gauge', metric.help= 'Current level of inventory', @map(type='keyvalue')) define stream InventoryLevelStream (Name String, value int); In the above example, the Prometheus-sink creates a gauge metric with the stream name and defined attributes as labels.The metric is pushed to the Prometheus pushGateway at the target URL.","title":"prometheus (Sink)"},{"location":"api/2.0.1/#source","text":"","title":"Source"},{"location":"api/2.0.1/#prometheus-source","text":"This source consumes Prometheus metrics that are exported from a specified URL as Siddhi events by sending HTTP requests to the URL. Based on the source configuration, it analyzes metrics from the text response and sends them as Siddhi events through key-value mapping.The user can retrieve metrics of the 'including', 'counter', 'gauge', 'histogram', and 'summary' types. The source retrieves the metrics from a text response of the target. Therefore, it is you need to use 'string' as the attribute type for the attributes that correspond with the Prometheus metric labels. Further, the Prometheus metric value is passed through the event as 'value'. This requires you to include an attribute named 'value' in the stream definition. The supported types for the 'value' attribute are 'INT', 'LONG', 'FLOAT', and 'DOUBLE'. Syntax @source(type=\"prometheus\", target.url=\"<STRING>\", scrape.interval=\"<INT>\", scrape.timeout=\"<INT>\", scheme=\"<STRING>\", metric.name=\"<STRING>\", metric.type=\"<STRING>\", username=\"<STRING>\", password=\"<STRING>\", client.truststore.file=\"<STRING>\", client.truststore.password=\"<STRING>\", headers=\"<STRING>\", job=\"<STRING>\", instance=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic target.url This property specifies the target URL to which the Prometheus metrics are exported in the 'TEXT' format. STRING No No scrape.interval This property specifies the time interval in seconds within which the source should send an HTTP request to the specified target URL. 60 INT Yes No scrape.timeout This property is the time duration in seconds for a scrape request to get timed-out if the server at the URL does not respond. 10 INT Yes No scheme This property specifies the scheme of the target URL. The supported schemes are 'HTTP' and 'HTTPS'. HTTP STRING Yes No metric.name This property specifies the name of the metrics that are to be fetched. The metric name must match the regex format, i.e., '[a-zA-Z_:][a-zA-Z0-9_:]* '. Stream name STRING Yes No metric.type This property specifies the type of the Prometheus metric that is required to be fetched. The supported metric types are 'counter', 'gauge',\" 'histogram', and 'summary'. STRING No No username This property specifies the username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No password This property specifies the password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No client.truststore.file The file path to the location of the truststore to which the client needs to send HTTPS requests via the 'HTTPS' protocol. STRING Yes No client.truststore.password The password for the client-truststore. This is required to send HTTPS requests. A custom password can be specified if required. STRING Yes No headers Headers that need to be included as HTTP request headers in the request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" STRING Yes No job This property defines the job name of the exported Prometheus metrics that needs to be fetched. STRING Yes No instance This property defines the instance of the exported Prometheus metrics that needs to be fetched. STRING Yes No grouping.key This parameter specifies the grouping key of the required metrics in key-value pairs. The grouping key is used if the metrics are exported by Prometheus 'pushGateway' in order to distinguish those metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters scrapeInterval The default time interval in seconds for the Prometheus source to send HTTP requests to the target URL. 60 Any integer value scrapeTimeout The default time duration (in seconds) for an HTTP request to time-out if the server at the URL does not respond. 10 Any integer value scheme The scheme of the target for the Prometheus source to send HTTP requests. The supported schemes are 'HTTP' and 'HTTPS'. HTTP HTTP or HTTPS username The username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string password The password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string trustStoreFile The default file path to the location of truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. ${carbon.home}/resources/security/client-truststore.jks Any valid path for the truststore file trustStorePassword The default password for the client-truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. wso2carbon Any string headers The headers that need to be included as HTTP request headers in the scrape request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" Any valid http headers job The default job name of the exported Prometheus metrics that needs to be fetched. Any valid job name instance The default instance of the exported Prometheus metrics that needs to be fetched. Any valid instance name groupingKey The default grouping key of the required Prometheus metrics in key-value pairs. The grouping key is used if the metrics are exported by the Prometheus pushGateway in order to distinguish these metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" Any valid grouping key pairs Examples EXAMPLE 1 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'counter', metric.name= 'sweet_production_counter', @map(type= 'keyvalue')) define stream FooStream1(metric_name string, metric_type string, help string, subtype string, name string, quantity string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus counter metrics with the 'sweet_production_counter' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_counter metric_type -> counter help -> <help_string_of_metric> subtype -> null name -> <value_of_label_name> quantity -> <value_of_label_quantity> value -> <value_of_metric> EXAMPLE 2 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'summary', metric.name= 'sweet_production_summary', @map(type= 'keyvalue')) define stream FooStream2(metric_name string, metric_type string, help string, subtype string, name string, quantity string, quantile string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analysed response, the source retrieves the Prometheus summary metrics with the 'sweet_production_summary' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_summary metric_type -> summary help -> <help_string_of_metric> subtype -> <'sum'/'count'/'null'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> quantile -> <value of the quantile> value -> <value_of_metric> EXAMPLE 3 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'histogram', metric.name= 'sweet_production_histogram', @map(type= 'keyvalue')) define stream FooStream3(metric_name string, metric_type string, help string, subtype string, name string, quantity string, le string, value double); In this example, the prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus histogram metrics with the 'sweet_production_histogram' name and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows, metric_name -> sweet_production_histogram metric_type -> histogram help -> <help_string_of_metric> subtype -> <'sum'/'count'/'bucket'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> le -> <value of the bucket> value -> <value_of_metric>","title":"prometheus (Source)"},{"location":"api/latest/","text":"API Docs - v2.0.1 Tested Siddhi Core version: 5.0.0 It could also support other Siddhi Core minor versions. Sink prometheus (Sink) This sink publishes events processed by Siddhi into Prometheus metrics and exposes them to the Prometheus server at the specified URL. The created metrics can be published to Prometheus via 'server' or 'pushGateway', depending on your preference. The metric types that are supported by the Prometheus sink are 'counter', 'gauge', 'histogram', and 'summary'. The values and labels of the Prometheus metrics can be updated through the events. Syntax @sink(type=\"prometheus\", job=\"<STRING>\", publish.mode=\"<STRING>\", push.url=\"<STRING>\", server.url=\"<STRING>\", metric.type=\"<STRING>\", metric.help=\"<STRING>\", metric.name=\"<STRING>\", buckets=\"<STRING>\", quantiles=\"<STRING>\", quantile.error=\"<DOUBLE>\", value.attribute=\"<STRING>\", push.operation=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic job This parameter specifies the job name of the metric. This must be the same job name that is defined in the Prometheus configuration file. siddhiJob STRING Yes No publish.mode The mode in which the metrics need to be exposed to the Prometheus server.The possible publishing modes are 'server' and 'pushgateway'.The server mode exposes the metrics through an HTTP server at the specified URL, and the 'pushGateway' mode pushes the metrics to the pushGateway that needs to be running at the specified URL. server STRING Yes No push.url This parameter specifies the target URL of the Prometheus pushGateway. This is the URL at which the pushGateway must be listening. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9091 STRING Yes No server.url This parameter specifies the URL where the HTTP server is initiated to expose metrics in the 'server' publish mode. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9080 STRING Yes No metric.type The type of Prometheus metric that needs to be created at the sink. The supported metric types are 'counter', 'gauge',c'histogram' and 'summary'. STRING No No metric.help A brief description of the metric and its purpose. STRING Yes No metric.name This parameter allows you to assign a preferred name for the metric. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]*. STRING Yes No buckets The bucket values preferred by the user for histogram metrics. The bucket values must be in the 'string' format with each bucket value separated by a comma as shown in the example below. \"2,4,6,8\" null STRING Yes No quantiles This parameter allows you to specify quantile values for summary metrics as preferred. The quantile values must be in the 'string' format with each quantile value separated by a comma as shown in the example below. \"0.5,0.75,0.95\" null STRING Yes No quantile.error The error tolerance value for calculating quantiles in summary metrics. This must be a positive value, but less than 1. 0.001 DOUBLE Yes No value.attribute The name of the attribute in the stream definition that specifies the metric value. The defined 'value' attribute must be included in the stream definition. The system increases the metric value for the counter and gauge metric types by the value of the 'value attribute. The system observes the value of the 'value' attribute for the calculations of 'summary' and 'histogram' metric types. value STRING Yes No push.operation This parameter defines the mode for pushing metrics to the pushGateway. The available push operations are 'push' and 'pushadd'. The operations differ according to the existing metrics in pushGateway where 'push' operation replaces the existing metrics, and 'pushadd' operation only updates the newly created metrics. pushadd STRING Yes No grouping.key This parameter specifies the grouping key of created metrics in key-value pairs. The grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters jobName This property specifies the default job name for the metric. This job name must be the same as the job name defined in the Prometheus configuration file. siddhiJob Any string publishMode The default publish mode for the Prometheus sink for exposing metrics to the Prometheus server. The mode can be either 'server' or 'pushgateway'. server server or pushgateway serverURL This property configures the URL where the HTTP server is initiated to expose metrics. This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. By default, the HTTP server is initiated at 'http://localhost:9080'. http://localhost:9080 Any valid URL pushURL This property configures the target URL of the Prometheus pushGateway (where the pushGateway needs to listen). This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. http://localhost:9091 Any valid URL groupingKey This property configures the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish these metrics from already existing metrics under the same job. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" . null Any key value pairs in the supported format Examples EXAMPLE 1 @sink(type='prometheus',job='fooOrderCount', server.url ='http://localhost:9080', publish.mode='server', metric.type='counter', metric.help= 'Number of foo orders', @map(type='keyvalue')) define stream FooCountStream (Name String, quantity int, value int); In the above example, the Prometheus-sink creates a counter metric with the stream name and defined attributes as labels. The metric is exposed through an HTTP server at the target URL. EXAMPLE 2 @sink(type='prometheus',job='inventoryLevel', push.url='http://localhost:9080', publish.mode='pushGateway', metric.type='gauge', metric.help= 'Current level of inventory', @map(type='keyvalue')) define stream InventoryLevelStream (Name String, value int); In the above example, the Prometheus-sink creates a gauge metric with the stream name and defined attributes as labels.The metric is pushed to the Prometheus pushGateway at the target URL. Source prometheus (Source) This source consumes Prometheus metrics that are exported from a specified URL as Siddhi events by sending HTTP requests to the URL. Based on the source configuration, it analyzes metrics from the text response and sends them as Siddhi events through key-value mapping.The user can retrieve metrics of the 'including', 'counter', 'gauge', 'histogram', and 'summary' types. The source retrieves the metrics from a text response of the target. Therefore, it is you need to use 'string' as the attribute type for the attributes that correspond with the Prometheus metric labels. Further, the Prometheus metric value is passed through the event as 'value'. This requires you to include an attribute named 'value' in the stream definition. The supported types for the 'value' attribute are 'INT', 'LONG', 'FLOAT', and 'DOUBLE'. Syntax @source(type=\"prometheus\", target.url=\"<STRING>\", scrape.interval=\"<INT>\", scrape.timeout=\"<INT>\", scheme=\"<STRING>\", metric.name=\"<STRING>\", metric.type=\"<STRING>\", username=\"<STRING>\", password=\"<STRING>\", client.truststore.file=\"<STRING>\", client.truststore.password=\"<STRING>\", headers=\"<STRING>\", job=\"<STRING>\", instance=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic target.url This property specifies the target URL to which the Prometheus metrics are exported in the 'TEXT' format. STRING No No scrape.interval This property specifies the time interval in seconds within which the source should send an HTTP request to the specified target URL. 60 INT Yes No scrape.timeout This property is the time duration in seconds for a scrape request to get timed-out if the server at the URL does not respond. 10 INT Yes No scheme This property specifies the scheme of the target URL. The supported schemes are 'HTTP' and 'HTTPS'. HTTP STRING Yes No metric.name This property specifies the name of the metrics that are to be fetched. The metric name must match the regex format, i.e., '[a-zA-Z_:][a-zA-Z0-9_:]* '. Stream name STRING Yes No metric.type This property specifies the type of the Prometheus metric that is required to be fetched. The supported metric types are 'counter', 'gauge',\" 'histogram', and 'summary'. STRING No No username This property specifies the username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No password This property specifies the password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No client.truststore.file The file path to the location of the truststore to which the client needs to send HTTPS requests via the 'HTTPS' protocol. STRING Yes No client.truststore.password The password for the client-truststore. This is required to send HTTPS requests. A custom password can be specified if required. STRING Yes No headers Headers that need to be included as HTTP request headers in the request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" STRING Yes No job This property defines the job name of the exported Prometheus metrics that needs to be fetched. STRING Yes No instance This property defines the instance of the exported Prometheus metrics that needs to be fetched. STRING Yes No grouping.key This parameter specifies the grouping key of the required metrics in key-value pairs. The grouping key is used if the metrics are exported by Prometheus 'pushGateway' in order to distinguish those metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters scrapeInterval The default time interval in seconds for the Prometheus source to send HTTP requests to the target URL. 60 Any integer value scrapeTimeout The default time duration (in seconds) for an HTTP request to time-out if the server at the URL does not respond. 10 Any integer value scheme The scheme of the target for the Prometheus source to send HTTP requests. The supported schemes are 'HTTP' and 'HTTPS'. HTTP HTTP or HTTPS username The username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string password The password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string trustStoreFile The default file path to the location of truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. ${carbon.home}/resources/security/client-truststore.jks Any valid path for the truststore file trustStorePassword The default password for the client-truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. wso2carbon Any string headers The headers that need to be included as HTTP request headers in the scrape request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" Any valid http headers job The default job name of the exported Prometheus metrics that needs to be fetched. Any valid job name instance The default instance of the exported Prometheus metrics that needs to be fetched. Any valid instance name groupingKey The default grouping key of the required Prometheus metrics in key-value pairs. The grouping key is used if the metrics are exported by the Prometheus pushGateway in order to distinguish these metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" Any valid grouping key pairs Examples EXAMPLE 1 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'counter', metric.name= 'sweet_production_counter', @map(type= 'keyvalue')) define stream FooStream1(metric_name string, metric_type string, help string, subtype string, name string, quantity string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus counter metrics with the 'sweet_production_counter' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_counter metric_type -> counter help -> <help_string_of_metric> subtype -> null name -> <value_of_label_name> quantity -> <value_of_label_quantity> value -> <value_of_metric> EXAMPLE 2 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'summary', metric.name= 'sweet_production_summary', @map(type= 'keyvalue')) define stream FooStream2(metric_name string, metric_type string, help string, subtype string, name string, quantity string, quantile string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analysed response, the source retrieves the Prometheus summary metrics with the 'sweet_production_summary' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_summary metric_type -> summary help -> <help_string_of_metric> subtype -> <'sum'/'count'/'null'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> quantile -> <value of the quantile> value -> <value_of_metric> EXAMPLE 3 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'histogram', metric.name= 'sweet_production_histogram', @map(type= 'keyvalue')) define stream FooStream3(metric_name string, metric_type string, help string, subtype string, name string, quantity string, le string, value double); In this example, the prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus histogram metrics with the 'sweet_production_histogram' name and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows, metric_name -> sweet_production_histogram metric_type -> histogram help -> <help_string_of_metric> subtype -> <'sum'/'count'/'bucket'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> le -> <value of the bucket> value -> <value_of_metric>","title":"latest"},{"location":"api/latest/#api-docs-v201","text":"Tested Siddhi Core version: 5.0.0 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.1"},{"location":"api/latest/#sink","text":"","title":"Sink"},{"location":"api/latest/#prometheus-sink","text":"This sink publishes events processed by Siddhi into Prometheus metrics and exposes them to the Prometheus server at the specified URL. The created metrics can be published to Prometheus via 'server' or 'pushGateway', depending on your preference. The metric types that are supported by the Prometheus sink are 'counter', 'gauge', 'histogram', and 'summary'. The values and labels of the Prometheus metrics can be updated through the events. Syntax @sink(type=\"prometheus\", job=\"<STRING>\", publish.mode=\"<STRING>\", push.url=\"<STRING>\", server.url=\"<STRING>\", metric.type=\"<STRING>\", metric.help=\"<STRING>\", metric.name=\"<STRING>\", buckets=\"<STRING>\", quantiles=\"<STRING>\", quantile.error=\"<DOUBLE>\", value.attribute=\"<STRING>\", push.operation=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic job This parameter specifies the job name of the metric. This must be the same job name that is defined in the Prometheus configuration file. siddhiJob STRING Yes No publish.mode The mode in which the metrics need to be exposed to the Prometheus server.The possible publishing modes are 'server' and 'pushgateway'.The server mode exposes the metrics through an HTTP server at the specified URL, and the 'pushGateway' mode pushes the metrics to the pushGateway that needs to be running at the specified URL. server STRING Yes No push.url This parameter specifies the target URL of the Prometheus pushGateway. This is the URL at which the pushGateway must be listening. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9091 STRING Yes No server.url This parameter specifies the URL where the HTTP server is initiated to expose metrics in the 'server' publish mode. This URL needs to be defined in the Prometheus configuration file as a target before it can be used here. http://localhost:9080 STRING Yes No metric.type The type of Prometheus metric that needs to be created at the sink. The supported metric types are 'counter', 'gauge',c'histogram' and 'summary'. STRING No No metric.help A brief description of the metric and its purpose. STRING Yes No metric.name This parameter allows you to assign a preferred name for the metric. The metric name must match the regex format, i.e., [a-zA-Z_:][a-zA-Z0-9_:]*. STRING Yes No buckets The bucket values preferred by the user for histogram metrics. The bucket values must be in the 'string' format with each bucket value separated by a comma as shown in the example below. \"2,4,6,8\" null STRING Yes No quantiles This parameter allows you to specify quantile values for summary metrics as preferred. The quantile values must be in the 'string' format with each quantile value separated by a comma as shown in the example below. \"0.5,0.75,0.95\" null STRING Yes No quantile.error The error tolerance value for calculating quantiles in summary metrics. This must be a positive value, but less than 1. 0.001 DOUBLE Yes No value.attribute The name of the attribute in the stream definition that specifies the metric value. The defined 'value' attribute must be included in the stream definition. The system increases the metric value for the counter and gauge metric types by the value of the 'value attribute. The system observes the value of the 'value' attribute for the calculations of 'summary' and 'histogram' metric types. value STRING Yes No push.operation This parameter defines the mode for pushing metrics to the pushGateway. The available push operations are 'push' and 'pushadd'. The operations differ according to the existing metrics in pushGateway where 'push' operation replaces the existing metrics, and 'pushadd' operation only updates the newly created metrics. pushadd STRING Yes No grouping.key This parameter specifies the grouping key of created metrics in key-value pairs. The grouping key is used only in pushGateway mode in order to distinguish the metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters jobName This property specifies the default job name for the metric. This job name must be the same as the job name defined in the Prometheus configuration file. siddhiJob Any string publishMode The default publish mode for the Prometheus sink for exposing metrics to the Prometheus server. The mode can be either 'server' or 'pushgateway'. server server or pushgateway serverURL This property configures the URL where the HTTP server is initiated to expose metrics. This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. By default, the HTTP server is initiated at 'http://localhost:9080'. http://localhost:9080 Any valid URL pushURL This property configures the target URL of the Prometheus pushGateway (where the pushGateway needs to listen). This URL needs to be defined in the Prometheus configuration file as a target to be identified by Prometheus before it can be used here. http://localhost:9091 Any valid URL groupingKey This property configures the grouping key of created metrics in key-value pairs. Grouping key is used only in pushGateway mode in order to distinguish these metrics from already existing metrics under the same job. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" . null Any key value pairs in the supported format Examples EXAMPLE 1 @sink(type='prometheus',job='fooOrderCount', server.url ='http://localhost:9080', publish.mode='server', metric.type='counter', metric.help= 'Number of foo orders', @map(type='keyvalue')) define stream FooCountStream (Name String, quantity int, value int); In the above example, the Prometheus-sink creates a counter metric with the stream name and defined attributes as labels. The metric is exposed through an HTTP server at the target URL. EXAMPLE 2 @sink(type='prometheus',job='inventoryLevel', push.url='http://localhost:9080', publish.mode='pushGateway', metric.type='gauge', metric.help= 'Current level of inventory', @map(type='keyvalue')) define stream InventoryLevelStream (Name String, value int); In the above example, the Prometheus-sink creates a gauge metric with the stream name and defined attributes as labels.The metric is pushed to the Prometheus pushGateway at the target URL.","title":"prometheus (Sink)"},{"location":"api/latest/#source","text":"","title":"Source"},{"location":"api/latest/#prometheus-source","text":"This source consumes Prometheus metrics that are exported from a specified URL as Siddhi events by sending HTTP requests to the URL. Based on the source configuration, it analyzes metrics from the text response and sends them as Siddhi events through key-value mapping.The user can retrieve metrics of the 'including', 'counter', 'gauge', 'histogram', and 'summary' types. The source retrieves the metrics from a text response of the target. Therefore, it is you need to use 'string' as the attribute type for the attributes that correspond with the Prometheus metric labels. Further, the Prometheus metric value is passed through the event as 'value'. This requires you to include an attribute named 'value' in the stream definition. The supported types for the 'value' attribute are 'INT', 'LONG', 'FLOAT', and 'DOUBLE'. Syntax @source(type=\"prometheus\", target.url=\"<STRING>\", scrape.interval=\"<INT>\", scrape.timeout=\"<INT>\", scheme=\"<STRING>\", metric.name=\"<STRING>\", metric.type=\"<STRING>\", username=\"<STRING>\", password=\"<STRING>\", client.truststore.file=\"<STRING>\", client.truststore.password=\"<STRING>\", headers=\"<STRING>\", job=\"<STRING>\", instance=\"<STRING>\", grouping.key=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic target.url This property specifies the target URL to which the Prometheus metrics are exported in the 'TEXT' format. STRING No No scrape.interval This property specifies the time interval in seconds within which the source should send an HTTP request to the specified target URL. 60 INT Yes No scrape.timeout This property is the time duration in seconds for a scrape request to get timed-out if the server at the URL does not respond. 10 INT Yes No scheme This property specifies the scheme of the target URL. The supported schemes are 'HTTP' and 'HTTPS'. HTTP STRING Yes No metric.name This property specifies the name of the metrics that are to be fetched. The metric name must match the regex format, i.e., '[a-zA-Z_:][a-zA-Z0-9_:]* '. Stream name STRING Yes No metric.type This property specifies the type of the Prometheus metric that is required to be fetched. The supported metric types are 'counter', 'gauge',\" 'histogram', and 'summary'. STRING No No username This property specifies the username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No password This property specifies the password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and the password to enable basic authentication. If you do not provide a value for one or both of these parameters, an error is logged in the console. STRING Yes No client.truststore.file The file path to the location of the truststore to which the client needs to send HTTPS requests via the 'HTTPS' protocol. STRING Yes No client.truststore.password The password for the client-truststore. This is required to send HTTPS requests. A custom password can be specified if required. STRING Yes No headers Headers that need to be included as HTTP request headers in the request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" STRING Yes No job This property defines the job name of the exported Prometheus metrics that needs to be fetched. STRING Yes No instance This property defines the instance of the exported Prometheus metrics that needs to be fetched. STRING Yes No grouping.key This parameter specifies the grouping key of the required metrics in key-value pairs. The grouping key is used if the metrics are exported by Prometheus 'pushGateway' in order to distinguish those metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" STRING Yes No System Parameters Name Description Default Value Possible Parameters scrapeInterval The default time interval in seconds for the Prometheus source to send HTTP requests to the target URL. 60 Any integer value scrapeTimeout The default time duration (in seconds) for an HTTP request to time-out if the server at the URL does not respond. 10 Any integer value scheme The scheme of the target for the Prometheus source to send HTTP requests. The supported schemes are 'HTTP' and 'HTTPS'. HTTP HTTP or HTTPS username The username that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string password The password that needs to be added in the authorization header of the HTTP request if basic authentication is enabled at the target. It is required to specify both the username and password to enable basic authentication. If you do not specify a value for one or both of these parameters, an error is logged in the console. Any string trustStoreFile The default file path to the location of truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. ${carbon.home}/resources/security/client-truststore.jks Any valid path for the truststore file trustStorePassword The default password for the client-truststore that the client needs to access in order to send HTTPS requests through 'HTTPS' protocol. wso2carbon Any string headers The headers that need to be included as HTTP request headers in the scrape request. The format of the supported input is as follows, \"'header1:value1','header2:value2'\" Any valid http headers job The default job name of the exported Prometheus metrics that needs to be fetched. Any valid job name instance The default instance of the exported Prometheus metrics that needs to be fetched. Any valid instance name groupingKey The default grouping key of the required Prometheus metrics in key-value pairs. The grouping key is used if the metrics are exported by the Prometheus pushGateway in order to distinguish these metrics from already existing metrics. The expected format of the grouping key is as follows: \"'key1:value1','key2:value2'\" Any valid grouping key pairs Examples EXAMPLE 1 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'counter', metric.name= 'sweet_production_counter', @map(type= 'keyvalue')) define stream FooStream1(metric_name string, metric_type string, help string, subtype string, name string, quantity string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus counter metrics with the 'sweet_production_counter' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_counter metric_type -> counter help -> <help_string_of_metric> subtype -> null name -> <value_of_label_name> quantity -> <value_of_label_quantity> value -> <value_of_metric> EXAMPLE 2 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'summary', metric.name= 'sweet_production_summary', @map(type= 'keyvalue')) define stream FooStream2(metric_name string, metric_type string, help string, subtype string, name string, quantity string, quantile string, value double); In this example, the Prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analysed response, the source retrieves the Prometheus summary metrics with the 'sweet_production_summary' nameand converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows: metric_name -> sweet_production_summary metric_type -> summary help -> <help_string_of_metric> subtype -> <'sum'/'count'/'null'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> quantile -> <value of the quantile> value -> <value_of_metric> EXAMPLE 3 @source(type= 'prometheus', target.url= 'http://localhost:9080/metrics', metric.type= 'histogram', metric.name= 'sweet_production_histogram', @map(type= 'keyvalue')) define stream FooStream3(metric_name string, metric_type string, help string, subtype string, name string, quantity string, le string, value double); In this example, the prometheus source sends an HTTP request to the 'target.url' and analyzes the response. From the analyzed response, the source retrieves the Prometheus histogram metrics with the 'sweet_production_histogram' name and converts the filtered metrics into Siddhi events using the key-value mapper. The generated maps have keys and values as follows, metric_name -> sweet_production_histogram metric_type -> histogram help -> <help_string_of_metric> subtype -> <'sum'/'count'/'bucket'> name -> <value_of_label_name> quantity -> <value_of_label_quantity> le -> <value of the bucket> value -> <value_of_metric>","title":"prometheus (Source)"}]}